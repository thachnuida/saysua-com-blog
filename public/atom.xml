<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Saysua Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://saysua.com/"/>
  <updated>2016-10-16T01:46:48.973Z</updated>
  <id>http://saysua.com/</id>
  
  <author>
    <name>Thach Nguyen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TeamCity – Build agent disconnected</title>
    <link href="http://saysua.com/2016/09/07/teamcity-build-agent-disconnected/"/>
    <id>http://saysua.com/2016/09/07/teamcity-build-agent-disconnected/</id>
    <published>2016-09-06T23:49:01.000Z</published>
    <updated>2016-10-16T01:46:48.973Z</updated>
    
    <content type="html"><![CDATA[<p>Bellow is how I resolve my problem with TeamCity – Build agent disconnected.</p>
<p><img src="/images/teamcity-agent-disconnected.png" alt="TeamCity Agent Disconected"></p>
<ul>
<li>ssh to my centos agent machine.</li>
<li>Go to agent folder, in this case it is <code>BuildAgent</code></li>
<li>I tried to stop the agent by <code>bin/agent.sh stop</code> but got no luck. When I started the agent it said that <code>Build agent is already running with PID 1795</code>, so that I could not restart it.</li>
<li>KILL the process by <code>sudo kill 1795</code></li>
<li>Restart again <code>bin/agent.sh start</code><br>=&gt; It should work now.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bellow is how I resolve my problem with TeamCity – Build agent disconnected.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/teamcity-agent-disconnected.png&quot; al
    
    </summary>
    
    
      <category term="TeamCity" scheme="http://saysua.com/tags/TeamCity/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs Module Caching</title>
    <link href="http://saysua.com/2016/04/19/nodejs-module-cache-trying/"/>
    <id>http://saysua.com/2016/04/19/nodejs-module-cache-trying/</id>
    <published>2016-04-19T04:05:24.000Z</published>
    <updated>2016-10-16T01:42:38.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nodejs-Module-Caching"><a href="#Nodejs-Module-Caching" class="headerlink" title="Nodejs Module Caching"></a>Nodejs Module Caching</h1><p>Modules are cached after the first time they are loaded. This means (among other things) that every call to require(‘foo’) will get exactly the same object returned, if it would resolve to the same file.</p>
<p>Multiple calls to require(‘foo’) may not cause the module code to be executed multiple times. This is an important feature. With it, “partially done” objects can be returned, thus allowing transitive dependencies to be loaded even when they would cause cycles.</p>
<p>If you want to have a module execute code multiple times, then export a function, and call that function.</p>
<p>(<a href="https://nodejs.org/api/modules.html#modules_caching" target="_blank" rel="external">https://nodejs.org/api/modules.html#modules_caching</a>)</p>
<a id="more"></a>
<h1 id="Trying-code"><a href="#Trying-code" class="headerlink" title="Trying code"></a>Trying code</h1><p>Let’s see bellow test code and the result:</p>
<p>A.js  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var <span class="built_in">list</span> = [];</div><div class="line"></div><div class="line"><span class="keyword">module</span>.exports = &#123;</div><div class="line">  <span class="built_in">list</span>: <span class="built_in">list</span>,</div><div class="line">  name: <span class="string">'t'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>index.js  </p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var <span class="built_in">a1</span> = require(<span class="string">'./A'</span>)<span class="comment">;</span></div><div class="line">var <span class="built_in">a2</span> = require(<span class="string">'./A'</span>)<span class="comment">;</span></div><div class="line"></div><div class="line"><span class="built_in">a1</span>.list.push(<span class="number">1</span>)<span class="comment">;</span></div><div class="line">console.log(<span class="built_in">a1</span>.list)<span class="comment">;</span></div><div class="line">console.log(<span class="built_in">a2</span>.list)<span class="comment">;</span></div><div class="line"></div><div class="line">console.log(<span class="built_in">a2</span>.name)<span class="comment">;</span></div><div class="line">console.log(<span class="built_in">a1</span>.name)<span class="comment">;</span></div><div class="line"><span class="built_in">a1</span>.name = <span class="string">'update'</span><span class="comment">;</span></div><div class="line">console.log(<span class="built_in">a2</span>.name)<span class="comment">;</span></div><div class="line">console.log(<span class="built_in">a1</span>.name)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>Result  </p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">[ 1 ]</span></div><div class="line"><span class="string">[ 1 ]</span></div><div class="line">t</div><div class="line">t</div><div class="line">update</div><div class="line">update</div></pre></td></tr></table></figure>
<p>So, we know <code>a1</code> and <code>a2</code> are the same object.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Nodejs-Module-Caching&quot;&gt;&lt;a href=&quot;#Nodejs-Module-Caching&quot; class=&quot;headerlink&quot; title=&quot;Nodejs Module Caching&quot;&gt;&lt;/a&gt;Nodejs Module Caching&lt;/h1&gt;&lt;p&gt;Modules are cached after the first time they are loaded. This means (among other things) that every call to require(‘foo’) will get exactly the same object returned, if it would resolve to the same file.&lt;/p&gt;
&lt;p&gt;Multiple calls to require(‘foo’) may not cause the module code to be executed multiple times. This is an important feature. With it, “partially done” objects can be returned, thus allowing transitive dependencies to be loaded even when they would cause cycles.&lt;/p&gt;
&lt;p&gt;If you want to have a module execute code multiple times, then export a function, and call that function.&lt;/p&gt;
&lt;p&gt;(&lt;a href=&quot;https://nodejs.org/api/modules.html#modules_caching&quot;&gt;https://nodejs.org/api/modules.html#modules_caching&lt;/a&gt;)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nodejs" scheme="http://saysua.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs - Request - Error socket hang up code - ECONNRESET</title>
    <link href="http://saysua.com/2016/03/01/nodejs-request-Error-socket-hang-up-code-ECONNRESET/"/>
    <id>http://saysua.com/2016/03/01/nodejs-request-Error-socket-hang-up-code-ECONNRESET/</id>
    <published>2016-03-01T04:05:24.000Z</published>
    <updated>2016-10-16T01:42:47.111Z</updated>
    
    <content type="html"><![CDATA[<p>Currently, I writing a nodejs server that I want to call external API via https. This is the code that I used.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</div><div class="line"><span class="keyword">var</span> userProfileUri = <span class="string">'http://test.com/API/user/profile'</span>;</div><div class="line">request.get(userProfileUri, &#123;</div><div class="line">  <span class="string">'headers'</span>: &#123;</div><div class="line">    <span class="string">'Authorization'</span>: <span class="string">'Bearer eyJ0eX'</span></div><div class="line">  &#125;,</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, response, body</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>After running this code, I waited for a minute and got this error:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; [<span class="string">Error:</span> socket hang up] <span class="string">code:</span> <span class="string">'ECONNRESET'</span> &#125;</div></pre></td></tr></table></figure>
<p>Doing for many searches via google, finally I got a solution that make my day happy. I hope that bellow solution can help you too.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</div><div class="line"><span class="keyword">var</span> userProfileUri = <span class="string">'http://test.com/API/user/profile'</span>;</div><div class="line">request.get(userProfileUri, &#123;</div><div class="line">  <span class="string">'headers'</span>: &#123;</div><div class="line">    <span class="string">'Authorization'</span>: <span class="string">'Bearer eyJ0eX'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">agentOptions</span>: &#123;</div><div class="line">    <span class="attr">secureOptions</span>: <span class="built_in">require</span>(<span class="string">'constants'</span>).SSL_OP_NO_TLSv1_2,</div><div class="line">    <span class="attr">ciphers</span>: <span class="string">'ECDHE-RSA-AES256-SHA:AES256-SHA:RC4-SHA:RC4:HIGH:!MD5:!aNULL:!EDH:!AESGCM'</span>,</div><div class="line">    <span class="attr">honorCipherOrder</span>: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, response, body</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>The important part is <code>agentOptions</code>. Just add it to your <code>request</code> config.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Currently, I writing a nodejs server that I want to call external API via https. This is the code that I used.&lt;/p&gt;
&lt;figure class=&quot;highlig
    
    </summary>
    
    
      <category term="Nodejs" scheme="http://saysua.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Làm quen với Angular 2 - Zoo app - part 3 - Dependency Injection</title>
    <link href="http://saysua.com/2015/12/14/lam-quen-voi-angular2-zoo-app-part-3-dependency-injection/"/>
    <id>http://saysua.com/2015/12/14/lam-quen-voi-angular2-zoo-app-part-3-dependency-injection/</id>
    <published>2015-12-14T04:05:24.000Z</published>
    <updated>2016-10-16T02:45:35.935Z</updated>
    
    <content type="html"><![CDATA[<p>Trong phần này, chúng ta sẽ cùng nhau tạo một service <code>AnimalService</code> để quản lý danh sách các con vật và nhúng nó vào <code>AppComponent</code>.</p>
<p>Ta tạo file <code>animal-service.ts</code> cùng cấp với <code>app.ts</code>:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">export <span class="class"><span class="keyword">class</span> <span class="title">AnimalService</span> </span>&#123;</div><div class="line">  animals: [];</div><div class="line"></div><div class="line">  constructor() &#123;</div><div class="line">    <span class="keyword">this</span>.animals = <span class="type">ANIMALS</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getAnimals() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.animals;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  addAnimal(<span class="class"><span class="keyword">type</span></span>: <span class="type">String</span>, name: <span class="type">String</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.animals.push(&#123; <span class="symbol">'typ</span>e': <span class="class"><span class="keyword">type</span>, '<span class="title">name</span>'</span>: name&#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> <span class="type">ANIMALS</span> = [</div><div class="line">  &#123; <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'Tige</span>r', name: <span class="symbol">'Bob</span>o'&#125;,</div><div class="line">  &#123; <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'Do</span>g', name: <span class="symbol">'Mi</span>c'&#125;,</div><div class="line">  &#123; <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'Elepha</span>n', name: <span class="symbol">'Bi</span>g'&#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>Một cách đơn giản, <code>service</code> trong Angular 2 chỉ là một class bình thường. Ở đây, ta có class <code>AnimalService</code> nó có hai phương thức sẽ được sử dụng trong <code>AppComponent</code> là <code>getAnimals</code> và <code>addAnimal</code>.</p>
<p>Trong <code>AppComponent</code> ta inject <code>AnimalService</code> vào như sau:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;AnimalService&#125; from <span class="string">'./animal-service'</span>;</div><div class="line"></div><div class="line">...</div><div class="line"><span class="meta">@Component(&#123;</span></div><div class="line">  ...</div><div class="line">&#125;)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> selectedAnimal;</div><div class="line">  <span class="keyword">public</span> newAnimal = &#123;</div><div class="line">    type: <span class="string">''</span>,</div><div class="line">    name: <span class="string">''</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  animals = [];</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(<span class="keyword">private</span> animalService: AnimalService) &#123;</div><div class="line">    <span class="keyword">this</span>.animals = animalService.getAnimals();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  select(animal) &#123; <span class="keyword">this</span>.selectedAnimal = animal; &#125;</div><div class="line"></div><div class="line">  getSelectedClass(animal) &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="string">'selected'</span>: animal === <span class="keyword">this</span>.selectedAnimal</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  onSubmit() &#123;</div><div class="line">    <span class="keyword">this</span>.animalService.addAnimal(<span class="keyword">this</span>.newAnimal.type, <span class="keyword">this</span>.newAnimal.name);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.newAnimal.type = <span class="string">''</span>;</div><div class="line">    <span class="keyword">this</span>.newAnimal.name = <span class="string">''</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">bootstrap(AppComponent, [AnimalService]);</div></pre></td></tr></table></figure>
<p>Trong <code>constructor</code> của <code>AppComponent</code> ta thêm vào tham số <code>animalService</code>, từ khóa <code>private</code> trước tham số sẽ báo cho TypeScript biết để tự động gán <code>animalService</code> trở thành một private member của <code>AppComponent</code>. Do đó trong hàm <code>onSubmit</code> ta có thể sử dụng <code>this.animalService</code>.</p>
<p>Angular 2 được xây dựng đi kèm với nó là <code>Dependency Injection framwork</code>, framwork này sẽ tự động nhúng một instance của <code>AnimalService</code> vào <code>AppComponent</code>. Tuy nhiên để được như vậy, ta cũng cần phải đồng thời khai báo <code>AnimalService</code> khi bootstrap App.</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bootstrap(<span class="name">AppComponent</span>, [AnimalService])<span class="comment">;</span></div></pre></td></tr></table></figure>
<h1 id="Nhung-service-vao-service"><a href="#Nhung-service-vao-service" class="headerlink" title="Nhúng service vào service"></a>Nhúng service vào service</h1><p>Nếu <code>AnimalService</code> của chúng ta cũng cần một service khác thì sao, ví dụ <code>LogService</code>. Khi đó <code>AnimalService</code> có thể như thế này:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;<span class="type">Injectable</span>&#125; from <span class="symbol">'angular2</span>/angular2';</div><div class="line"><span class="keyword">import</span> &#123;<span class="type">LogService</span>&#125; from './log-service';</div><div class="line"></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line">export <span class="class"><span class="keyword">class</span> <span class="title">AnimalService</span> </span>&#123;</div><div class="line">  animals: [];</div><div class="line"></div><div class="line">  constructor(<span class="keyword">private</span> logger: <span class="type">LogService</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.animals = <span class="type">ANIMALS</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getAnimals() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.animals;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  addAnimal(<span class="class"><span class="keyword">type</span></span>: <span class="type">String</span>, name: <span class="type">String</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.logger.log(<span class="symbol">'Adding</span> <span class="keyword">new</span> animal.');</div><div class="line">    <span class="keyword">this</span>.animals.push(&#123; <span class="symbol">'typ</span>e': <span class="class"><span class="keyword">type</span>, '<span class="title">name</span>'</span>: name&#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> <span class="type">ANIMALS</span> = [</div><div class="line">  &#123; <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'Tige</span>r', name: <span class="symbol">'Bob</span>o'&#125;,</div><div class="line">  &#123; <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'Do</span>g', name: <span class="symbol">'Mi</span>c'&#125;,</div><div class="line">  &#123; <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'Elepha</span>n', name: <span class="symbol">'Bi</span>g'&#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<p>Như vậy, để inject một service vào service khác, ta nhớ phải sử dụng <code>@Injectable()</code>.</p>
<h1 id="Tong-ket"><a href="#Tong-ket" class="headerlink" title="Tổng kết"></a>Tổng kết</h1><p>Trên đây là cách đơn giản để inject dependency vào Angular2. Thực tế có nhiều cách khác nhau để tạo một instance của service tùy từng mục đích mà chúng ta sẽ cùng nhau tìm hiểu trong những phần sau.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Trong phần này, chúng ta sẽ cùng nhau tạo một service &lt;code&gt;AnimalService&lt;/code&gt; để quản lý danh sách các con vật và nhúng nó vào &lt;code&gt;AppComponent&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ta tạo file &lt;code&gt;animal-service.ts&lt;/code&gt; cùng cấp với &lt;code&gt;app.ts&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;export &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AnimalService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  animals: [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  constructor() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.animals = &lt;span class=&quot;type&quot;&gt;ANIMALS&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  getAnimals() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.animals;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  addAnimal(&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;, name: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.animals.push(&amp;#123; &lt;span class=&quot;symbol&quot;&gt;&#39;typ&lt;/span&gt;e&#39;: &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;, &#39;&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&#39;&lt;/span&gt;: name&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;ANIMALS&lt;/span&gt; = [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;symbol&quot;&gt;&#39;Tige&lt;/span&gt;r&#39;, name: &lt;span class=&quot;symbol&quot;&gt;&#39;Bob&lt;/span&gt;o&#39;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;symbol&quot;&gt;&#39;Do&lt;/span&gt;g&#39;, name: &lt;span class=&quot;symbol&quot;&gt;&#39;Mi&lt;/span&gt;c&#39;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;symbol&quot;&gt;&#39;Elepha&lt;/span&gt;n&#39;, name: &lt;span class=&quot;symbol&quot;&gt;&#39;Bi&lt;/span&gt;g&#39;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Angular2" scheme="http://saysua.com/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>Làm quen với Angular 2 - Zoo app - part 2 - Form</title>
    <link href="http://saysua.com/2015/12/10/lam-quen-voi-angular2-zoo-app-part-2/"/>
    <id>http://saysua.com/2015/12/10/lam-quen-voi-angular2-zoo-app-part-2/</id>
    <published>2015-12-10T04:05:24.000Z</published>
    <updated>2016-10-16T02:45:33.399Z</updated>
    
    <content type="html"><![CDATA[<p>Ở <a href="/2015/12/04/lam-quen-voi-angular2-zoo-app-part-1/">phần 1</a> chúng ta đã sử dụng một vài directives cơ bản của Angular như NgFor, NgIf, NgClass và ta cũng biết rằng muốn sử dụng directive nào, ta phải khai báo directive đó cho Component. Tuy nhiên việc phải khai báo từng directive như vậy thật bất tiện. Để khắc phục điều đó, Angular 2 đã gộp các core directives vào một tập hợp là <code>CORE_DIRECTIVES</code> ta chỉ cần khai báo nó một lần là có thể dùng được các core directives của Angular. Trước khi vào phần 2 ta thay đổi một chút như sau:</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Component, bootstrap, CORE_DIRECTIVES, FORM_DIRECTIVES&#125; <span class="keyword">from</span> <span class="string">'angular2/angular2'</span>;</div><div class="line"></div><div class="line">...</div><div class="line">  directives: [CORE_DIRECTIVES, FORM_DIRECTIVES],</div></pre></td></tr></table></figure>
<p>Ngoài <code>CORE_DIRECTIVES</code> ra mình còn khai báo thêm <code>FORM_DIRECTIVES</code>, chắc hẳn là bạn đã đoán ra đó là tập hợp các directive dành cho Form của Angular.</p>
<a id="more"></a>
<h1 id="Tao-form"><a href="#Tao-form" class="headerlink" title="Tạo form"></a>Tạo form</h1><p>Trong Component template ta thêm vào form</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> (<span class="attr">ng-submit</span>)=<span class="string">"onSubmit()"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Type<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">required</span> [(<span class="attr">ng-model</span>)]=<span class="string">"newAnimal.type"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">required</span> [(<span class="attr">ng-model</span>)]=<span class="string">"newAnimal.name"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Trong Component ta thêm thuộc tính <code>newAnimal</code> và phương thức <code>onSubmit</code>:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> newAnimal = &#123;</div><div class="line">  type: <span class="string">''</span>,</div><div class="line">  name: <span class="string">''</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">onSubmit() &#123;</div><div class="line">  <span class="keyword">this</span>.animals.push(&#123;</div><div class="line">    type: <span class="keyword">this</span>.newAnimal.type,</div><div class="line">    name: <span class="keyword">this</span>.newAnimal.name</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.newAnimal.type = <span class="string">''</span>;</div><div class="line">  <span class="keyword">this</span>.newAnimal.name = <span class="string">''</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Sau khi ta nhập thông tin vào form và nhấn nút <code>Add</code> phương thức <code>onSubmit</code> sẽ được gọi. Trong phương thức này ta push thêm một animal mới vào danh sách <code>this.animals</code> với dữ liệu được lấy từ <code>this.newAnimal</code> mà ta đã liên kết nó với form input bằng <code>[(ng-model)]</code>. Sau khi add xong, ta làm trống 2 ô text input bằng cách gán chuỗi rỗng vào <code>type</code> và <code>name</code> của <code>newAnimal</code>.</p>
<h1 id="ng-model"><a href="#ng-model" class="headerlink" title="ng-model"></a>ng-model</h1><p><em>Phần này trình bày sâu về directive ng-mode, bạn có thể bỏ qua nếu muốn dùng mà không cần tìm hiểu thêm</em></p>
<p>Như ta thấy ở trên, dữ liệu giữa model và text input đã được truyền theo kiểu two-way data binding.</p>
<p>Với Property binding, <code>ng-model</code> được bọc trong cặp dấu <code>[]</code>, khi dữ liệu của model thay đổi, nó sẽ thay đổi phần view của text input. Cho nên khi ta gán <code>this.newAnimal.type = &#39;&#39;</code>, text input của ta cũng bị làm rỗng. Dữ liệu ở đây đi theo chiều <strong>model -&gt; view</strong>.</p>
<p>Với Event binding, <code>ng-model</code> được bọc trong cặp dấu <code>()</code>, khi giá trị của text input thay đổi, dữ liệu sẽ được cập nhật lại vào trong <code>newAnimal</code>. Chính vì vậy, khi form được submit ta mới có thể lấy được thông tin nhập vào từ text input. Dữ liệu ở đây đi theo chiều <strong>view -&gt; model</strong>.</p>
<p>Thực tế thì ta có thể tách <code>[(ngModel)]</code> ra 2 phần riêng lẽ như sau:</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"text"</span> required (ng-model-<span class="keyword">change</span>)=<span class="string">"newAnimal.type = $event"</span> [ng-model]=<span class="string">"newAnimal.type"</span>&gt;</div></pre></td></tr></table></figure>
<p>Việc binding cũng sẽ diễn ra tương tự.</p>
<p><code>ng-model-change</code> ở đây không phải là một event của thẻ <code>&lt;input&gt;</code> mà nó thực tế là một event property của <code>ngModel</code>. Khi Angular nhìn thấy cú pháp <code>[(abc)]</code> nó sẽ mong đợi directive <code>abc</code> có một input property <code>abc</code> và một ouput property <code>abc-change</code>.</p>
<p>Khi coi sơ qua code của <code>ngModel</code> ta sẽ thấy như sau (Code này có thể thay đổi khi Angular2 ra bản chính thức):</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Directive</span>(&#123;</div><div class="line">  <span class="attribute">selector</span>: <span class="string">'[ng-model]:not([ng-control]):not([ng-form-control])'</span>,</div><div class="line">  <span class="attribute">bindings</span>: [formControlBinding],</div><div class="line">  <span class="attribute">inputs</span>: [<span class="string">'model: ngModel'</span>],</div><div class="line">  <span class="attribute">outputs</span>: [<span class="string">'update: ngModelChange'</span>],</div><div class="line">  <span class="attribute">exportAs</span>: <span class="string">'form'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><code>ng-model-change</code> là một <code>EventEmitter</code> của angular, nó sẽ trả về value cho input khi được gọi.</p>
<p>Nói chung là tìm hiểu một chút cho biết, còn bình thường thì ta cứ dùng <code>[(ng-model)]</code> cho khỏe.</p>
<h1 id="Validate-va-track-state-voi-ng-control"><a href="#Validate-va-track-state-voi-ng-control" class="headerlink" title="Validate và track state với ng-control"></a>Validate và track state với ng-control</h1><p>Ta sửa lại template phần form và add thêm style cho component như sau:</p>
<p>Form  </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> (<span class="attr">ng-submit</span>)=<span class="string">"onSubmit()"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Type<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">required</span> [(<span class="attr">ng-model</span>)]=<span class="string">"newAnimal.type"</span> <span class="attr">ng-control</span>=<span class="string">"type"</span> #<span class="attr">type</span>=<span class="string">"form"</span> <span class="attr">required</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">required</span> [(<span class="attr">ng-model</span>)]=<span class="string">"newAnimal.name"</span> <span class="attr">ng-control</span>=<span class="string">"name"</span> #<span class="attr">name</span>=<span class="string">"form"</span> <span class="attr">required</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert"</span> [<span class="attr">hidden</span>]=<span class="string">"type.valid"</span>&gt;</span>Type is required<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert"</span> [<span class="attr">hidden</span>]=<span class="string">"name.valid"</span>&gt;</span>Name is required<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Styles  </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>; &#125;</div><div class="line"><span class="selector-class">.ng-invalid</span> &#123; <span class="attribute">border-left</span>: <span class="number">3px</span> solid red; &#125;</div><div class="line"><span class="selector-class">.alert</span> &#123; <span class="attribute">color</span>: red; &#125;</div></pre></td></tr></table></figure>
<p>Để có thể theo dõi được state của form controller ta sử dung directive <code>ng-control</code>, directive này chỉ có thể được áp dụng cho control bên trong thẻ <code>&lt;form&gt;</code>.</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">label</span>&gt;<span class="keyword">Type</span>&lt;/lable&gt;&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> required [(ng-model)]=<span class="string">"newAnimal.type"</span> ng-control=<span class="string">"type"</span> #<span class="keyword">type</span>=<span class="string">"form"</span> required&gt;</div></pre></td></tr></table></figure>
<p>Với mỗi <code>ng-control</code> ta cần gán cho nó một cái tên duy nhất. <code>ng-control</code> giúp ta biết được khi nào control được click (touch), khi nào giá trị thay đổi, khi nào thì giá trị bị sai. Và nó cũng thêm vào control một vài class đặc biệt của Angular.</p>
<table>
<thead>
<tr>
<th>State</th>
<th>Class if true</th>
<th>Class if false</th>
</tr>
</thead>
<tbody>
<tr>
<td>Control has been visited</td>
<td>ng-touched</td>
<td>ng-untouched</td>
</tr>
<tr>
<td>Control’s value has changed</td>
<td>ng-dirty</td>
<td>ng-pristine</td>
</tr>
<tr>
<td>Control’s value is valid</td>
<td>ng-valid</td>
<td>ng-invalid</td>
</tr>
</tbody>
</table>
<p>Vì input của ta có thuộc tính <code>required</code> nên khi không có giá trị nào bên trong, <code>ng-control</code> sẽ tự động thêm vào class <code>ng-invalid</code> do đó ta sẽ thấy input của mình như thế này:</p>
<p><a href="http://localhost:8000/images/angular2-input-invalid.png" title="input invalid" target="_blank" rel="external"><img src="/images/angular2-input-invalid.png" alt="input invalid"></a><span class="caption">input invalid</span></p>
<h2 id="Hien-thi-thong-bao-loi-khi-input-khong-dung"><a href="#Hien-thi-thong-bao-loi-khi-input-khong-dung" class="headerlink" title="Hiển thị thông báo lỗi khi input không đúng"></a>Hiển thị thông báo lỗi khi input không đúng</h2><p>Trong input ta tạo một local variable <code>#type=&quot;form&quot;</code> và gán cho nó từ <code>form</code>. Angular tự hiểu cú pháp này và gán <code>Control</code> Object cho biến <code>type</code>. Do đó ta có thể bind giá trị <code>type.valid</code> vào property <code>hidden</code> của thẻ <code>div</code>:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"alert"</span> [hidden]=<span class="string">"type.valid"</span>&gt;Type <span class="keyword">is</span> required&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<p><a href="http://localhost:8000/images/angular2-error-message.png" title="error message" target="_blank" rel="external"><img src="/images/angular2-error-message.png" alt="error message"></a><span class="caption">error message</span></p>
<h2 id="Ngan-form-submit-khi-du-lieu-invalid"><a href="#Ngan-form-submit-khi-du-lieu-invalid" class="headerlink" title="Ngăn form submit khi dữ liệu invalid"></a>Ngăn form submit khi dữ liệu invalid</h2><p>Ta tạo một local variable <code>animalForm</code> và disable nút <code>Add</code> khi dữ liệu trong form invalid.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> (<span class="attr">ng-submit</span>)=<span class="string">"onSubmit()"</span> #<span class="attr">animalform</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Type<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">required</span> [(<span class="attr">ng-model</span>)]=<span class="string">"newAnimal.type"</span> <span class="attr">ng-control</span>=<span class="string">"type"</span> #<span class="attr">type</span>=<span class="string">"form"</span> <span class="attr">required</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">required</span> [(<span class="attr">ng-model</span>)]=<span class="string">"newAnimal.name"</span> <span class="attr">ng-control</span>=<span class="string">"name"</span> #<span class="attr">name</span>=<span class="string">"form"</span> <span class="attr">required</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> [<span class="attr">disabled</span>]=<span class="string">"!animalform.form.valid"</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert"</span> [<span class="attr">hidden</span>]=<span class="string">"type.valid"</span>&gt;</span>Type is required<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert"</span> [<span class="attr">hidden</span>]=<span class="string">"name.valid"</span>&gt;</span>Name is required<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Khi mới chạy ta sẽ thấy nút <code>Add</code> bị disabled, sau khi đã điền đủ thông tin vào name và type, nút <code>Add</code> sẽ được enable trở lại và ta có thể submit form.</p>
<h1 id="Tong-ket"><a href="#Tong-ket" class="headerlink" title="Tổng kết"></a>Tổng kết</h1><p><a href="http://localhost:8000/images/angular2-zoo-app-2.png" title="zoo app version 2" target="_blank" rel="external"><img src="/images/angular2-zoo-app-2.png" alt="zoo app version 2"></a><span class="caption">zoo app version 2</span></p>
<p>Sau phần này, ta đã biết cách sử dụng <code>ng-model</code> cho two-way data binding. Tìm hiểu một chút về cách <code>[(ng-model)]</code> hoạt động.<br>Sử dụng <code>ng-control</code> để theo dõi trạng thái của <code>control</code>, cũng như thêm style cho control, ẩn hiện thông báo lỗi tùy vào trạng thái của control.</p>
<p>Toàn bộ code của phần 2.</p>
<p><code>app.ts</code></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;<span class="type">Component</span>, bootstrap, <span class="type">CORE_DIRECTIVES</span>, <span class="type">FORM_DIRECTIVES</span>&#125; from <span class="symbol">'angular2</span>/angular2';</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="symbol">'ap</span>p',</div><div class="line">  directives: [<span class="type">CORE_DIRECTIVES</span>, <span class="type">FORM_DIRECTIVES</span>],</div><div class="line">  template: `</div><div class="line">    &lt;h1&gt;<span class="type">Animal</span> list&lt;/h1&gt;</div><div class="line">    &lt;form (ng-submit)=<span class="string">"onSubmit()"</span> #animalform=<span class="string">"form"</span>&gt;</div><div class="line">      &lt;label&gt;<span class="type">Type</span>&lt;/lable&gt;&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"text"</span> required [(ng-model)]=<span class="string">"newAnimal.type"</span> ng-control=<span class="string">"type"</span> #<span class="class"><span class="keyword">type</span></span>=<span class="string">"form"</span> required&gt;</div><div class="line">      &lt;label&gt;<span class="type">Name</span>&lt;/lable&gt;&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"text"</span> required [(ng-model)]=<span class="string">"newAnimal.name"</span> ng-control=<span class="string">"name"</span> #name=<span class="string">"form"</span> required&gt;</div><div class="line">      &lt;button <span class="class"><span class="keyword">type</span></span>=<span class="string">"submit"</span> [disabled]=<span class="string">"!animalform.form.valid"</span>&gt;<span class="type">Add</span>&lt;/button&gt;</div><div class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"alert"</span> [hidden]=<span class="string">"type.valid"</span>&gt;<span class="type">Type</span> is required&lt;/div&gt;</div><div class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"alert"</span> [hidden]=<span class="string">"name.valid"</span>&gt;<span class="type">Name</span> is required&lt;/div&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">    &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"animal-list"</span>&gt;</div><div class="line">      &lt;li *ng-<span class="keyword">for</span>=<span class="string">"#animal of animals"</span> (click)=<span class="string">"select(animal)"</span> [ng-<span class="class"><span class="keyword">class</span>]</span>=<span class="string">"getSelectedClass(animal)"</span>&gt;</div><div class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"type"</span>&gt;&#123;&#123;animal.<span class="keyword">type</span>&#125;&#125;&lt;/span&gt; &#123;&#123;animal.name&#125;&#125;</div><div class="line">      &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">    &lt;div *ng-<span class="keyword">if</span>=<span class="string">"selectedAnimal"</span>&gt;</div><div class="line">      &lt;h2&gt;<span class="type">Selected</span> <span class="type">Animal</span>&lt;/h2&gt;</div><div class="line">      (&#123;&#123;selectedAnimal.<span class="keyword">type</span>&#125;&#125;) &#123;&#123;selectedAnimal.name&#125;&#125;</div><div class="line">    &lt;/div&gt;</div><div class="line">  `,</div><div class="line">  styles: [`</div><div class="line">    .animal-list &#123; list-style-<span class="class"><span class="keyword">type</span></span>: none; padding: <span class="number">0</span>; &#125;</div><div class="line">    .animal-list li &#123; cursor: pointer; &#125;</div><div class="line">    .animal-list li:hover &#123; cursor: pointer; font-weight: bold; &#125;</div><div class="line">    .animal-list li .<span class="keyword">type</span> &#123; background: #<span class="type">FF9800</span>; color: #<span class="type">FFF</span>; padding: <span class="number">2</span>px <span class="number">4</span>px; line-height: <span class="number">1.5</span>em;&#125;</div><div class="line">    .selected &#123; font-weight: bold; &#125;</div><div class="line">    input &#123; border: <span class="number">1</span>px solid #ccc; &#125;</div><div class="line">    .ng-invalid &#123; border-left: <span class="number">3</span>px solid red; &#125;</div><div class="line">    .alert &#123; color: red; &#125;</div><div class="line">  `]</div><div class="line">&#125;)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</div><div class="line">  public selectedAnimal;</div><div class="line">  public newAnimal = &#123;</div><div class="line">    <span class="class"><span class="keyword">type</span></span>: '',</div><div class="line">    name: ''</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  animals = [</div><div class="line">    &#123; <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'Tige</span>r', name: <span class="symbol">'Bob</span>o'&#125;,</div><div class="line">    &#123; <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'Do</span>g', name: <span class="symbol">'Mi</span>c'&#125;,</div><div class="line">    &#123; <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'Elepha</span>n', name: <span class="symbol">'Bi</span>g'&#125;</div><div class="line">  ];</div><div class="line"></div><div class="line">  select(animal) &#123; <span class="keyword">this</span>.selectedAnimal = animal; &#125;</div><div class="line"></div><div class="line">  getSelectedClass(animal) &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="symbol">'selecte</span>d': animal === <span class="keyword">this</span>.selectedAnimal</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  onSubmit() &#123;</div><div class="line">    <span class="keyword">this</span>.animals.push(&#123;</div><div class="line">      <span class="class"><span class="keyword">type</span></span>: <span class="keyword">this</span>.newAnimal.<span class="keyword">type</span>,</div><div class="line">      name: <span class="keyword">this</span>.newAnimal.name</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.newAnimal.<span class="keyword">type</span> = '';</div><div class="line">    <span class="keyword">this</span>.newAnimal.name = '';</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">bootstrap(<span class="type">AppComponent</span>);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ở &lt;a href=&quot;/2015/12/04/lam-quen-voi-angular2-zoo-app-part-1/&quot;&gt;phần 1&lt;/a&gt; chúng ta đã sử dụng một vài directives cơ bản của Angular như NgFor, NgIf, NgClass và ta cũng biết rằng muốn sử dụng directive nào, ta phải khai báo directive đó cho Component. Tuy nhiên việc phải khai báo từng directive như vậy thật bất tiện. Để khắc phục điều đó, Angular 2 đã gộp các core directives vào một tập hợp là &lt;code&gt;CORE_DIRECTIVES&lt;/code&gt; ta chỉ cần khai báo nó một lần là có thể dùng được các core directives của Angular. Trước khi vào phần 2 ta thay đổi một chút như sau:&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123;Component, bootstrap, CORE_DIRECTIVES, FORM_DIRECTIVES&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;angular2/angular2&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  directives: [CORE_DIRECTIVES, FORM_DIRECTIVES],&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Ngoài &lt;code&gt;CORE_DIRECTIVES&lt;/code&gt; ra mình còn khai báo thêm &lt;code&gt;FORM_DIRECTIVES&lt;/code&gt;, chắc hẳn là bạn đã đoán ra đó là tập hợp các directive dành cho Form của Angular.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Angular2" scheme="http://saysua.com/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>Làm quen với Angular 2 - Zoo app - part 1</title>
    <link href="http://saysua.com/2015/12/04/lam-quen-voi-angular2-zoo-app-part-1/"/>
    <id>http://saysua.com/2015/12/04/lam-quen-voi-angular2-zoo-app-part-1/</id>
    <published>2015-12-04T04:05:24.000Z</published>
    <updated>2016-10-16T08:27:03.412Z</updated>
    
    <content type="html"><![CDATA[<p>Trước khi bắt đầu, bạn nên coi qua bài <a href="/2015/12/02/lam-quen-voi-Angular2-Tao-mot-ung-dung-don-gian-bang-TypeScript/">Làm quen với Angular 2 - Tạo một ứng dụng bằng TypeScript</a> để có khái niệm cơ bản về Angular2 và làm việc với Typescript.</p>
<p>Ở bài này, mình sẽ viết một ứng dụng quản lý sở thú bằng Angular 2 với typescript. Sau khi kết thúc ta sẽ có một ứng dụng như sau:</p>
<p><a href="http://localhost:8000/images/angular2-animal-selected-animal.png" title="zoo app" target="_blank" rel="external"><img src="/images/angular2-animal-selected-animal.png" alt="zoo app"></a></p>
<a id="more"></a>
<p>Tạo một thư mục để chứa ứng dụng.</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> angular-zoo</div><div class="line"><span class="built_in">cd</span> angular-zoo</div></pre></td></tr></table></figure>
<p>Ở đây, mình sẽ dùng <code>live-server</code> để chạy một static server, nó sẽ giúp trang web tự động tải lại khi nội dung file được thay đổi.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g live-<span class="keyword">server</span></div></pre></td></tr></table></figure>
<h1 id="App-Component"><a href="#App-Component" class="headerlink" title="App Component"></a>App Component</h1><p>Trong thư mục ứng dụng, tạo file <code>app.ts</code> với nội dung sau:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;<span class="type">Component</span>, bootstrap&#125; from <span class="symbol">'angular2</span>/angular2';</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="symbol">'ap</span>p',</div><div class="line">  template: `</div><div class="line">    &lt;h1&gt;<span class="type">Animal</span> list&lt;/h1&gt;</div><div class="line">    &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"animal-list"</span>&gt;</div><div class="line">      &lt;li *ng-<span class="keyword">for</span>=<span class="string">"#animal of animals"</span>&gt;</div><div class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"type"</span>&gt;&#123;&#123;animal.<span class="keyword">type</span>&#125;&#125;&lt;/span&gt; &#123;&#123;animal.name&#125;&#125;</div><div class="line">      &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  `</div><div class="line">&#125;)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</div><div class="line">  animals = [</div><div class="line">    &#123; <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'Tige</span>r', name: <span class="symbol">'Bob</span>o'&#125;,</div><div class="line">    &#123; <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'Do</span>g', name: <span class="symbol">'Mi</span>c'&#125;,</div><div class="line">    &#123; <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'Elepha</span>n', name: <span class="symbol">'Bi</span>g'&#125;</div><div class="line">  ];</div><div class="line">&#125;</div><div class="line"></div><div class="line">bootstrap(<span class="type">AppComponent</span>);</div></pre></td></tr></table></figure>
<p>Ở đây, ta có directive <code>ng-for</code> là một repeater directive của Angular 2.</p>
<p><strong>Chú ý</strong>: Dấu * trước <code>ng-for</code> là cần thiết. Nó cho <code>ng-for</code> biết rằng, thẻ <code>&lt;li&gt;</code> và nội dung trong nó chính là template của từng phần tử.</p>
<p>Bằng cách sử dụng typescript, ta có một cách để viết chuỗi với nhiều dòng như phần <code>template</code> của <code>Component</code>, đó là sử dụng dấu ` (Không phải là dấu nháy đơn, dấu này trên bàn phím thường nằm ở phím dưới phím ESC)</p>
<h1 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h1><p>Tiếp tục, tạo file <code>index.html</code> với nội dung sau:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Angular 2 QuickStart<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.angularjs.org/tools/system.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.angularjs.org/tools/typescript.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.angularjs.org/2.0.0-alpha.44/angular2.dev.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">      System.config(&#123;</div><div class="line">        transpiler: <span class="string">'typescript'</span>,</div><div class="line">        typescriptOptions: &#123; emitDecoratorMetadata: <span class="literal">true</span> &#125;</div><div class="line">      &#125;);</div><div class="line">      System.import(<span class="string">'./app.ts'</span>);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">app</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">app</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="Chay-server"><a href="#Chay-server" class="headerlink" title="Chạy server"></a>Chạy server</h1><p>Mở terminal và chạy lệnh</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">live-<span class="keyword">server</span></div></pre></td></tr></table></figure>
<p>Nếu như mọi chuyện đều ổn, ta sẽ nhìn thấy một danh sách các con vật với loại và tên, tuy nhiên, ta chỉ thấy dòng chữ <code>loading...</code>. Bật develop tool của trình duyệt lên (ở đây mình dùng Chrome) ta sẽ thấy lỗi:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">EXCEPTION: Template parse errors:</div><div class="line">Can<span class="string">'t bind to '</span>ngForOf<span class="string">' since it isn'</span>t <span class="selector-tag">a</span> known native property <span class="keyword">in</span> AppComponent &gt; <span class="selector-tag">ul</span>:nth-child(<span class="number">1</span>) &gt; <span class="selector-tag">li</span>:nth-child(<span class="number">1</span>)[*ng-<span class="keyword">for</span>=<span class="selector-id">#animal</span> of animals]</div></pre></td></tr></table></figure>
<p>Lý do là do ta dùng directive <code>ng-for</code> trong template, nhưng ứng dụng không biết directive đó ở đâu. Ta sẽ sửa nó bằng cách import <code>ng-for</code> vào và nhúng vào app component.</p>
<p>Trong file <code>app.ts</code> ta sửa lại dòng import:</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Component, bootstrap, NgFor&#125; <span class="keyword">from</span> <span class="string">'angular2/angular2'</span>;</div></pre></td></tr></table></figure>
<p>và trong component ngay dưới thuộc tính <code>selector</code> ta thêm vào thuộc tính <code>directives</code> để cho component của ta biết template sẽ sử dụng những directives nào.</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="xml">@Component(&#123;</span></div><div class="line">  selector: 'app',</div><div class="line">  directives: [NgFor],</div><div class="line">  template: `</div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Animal list<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"animal-list"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ng-for</span>=<span class="string">"#animal of animals"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"type"</span>&gt;</span><span class="template-variable">&#123;&#123;animal.type&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><span class="template-variable">&#123;&#123;animal.name&#125;&#125;</span><span class="xml"></span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  `</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>Ghi chú:</strong> Dấu # trước <code>animal</code> nghĩa là Angular sẽ tạo 1 local variable có tên là <code>animal</code></p>
<p><a href="http://localhost:8000/images/angular2-animal-list.png" title="animal list" target="_blank" rel="external"><img src="/images/angular2-animal-list.png" alt="animal list"></a></p>
<h1 id="Them-style-cho-app-component"><a href="#Them-style-cho-app-component" class="headerlink" title="Thêm style cho app component"></a>Thêm style cho app component</h1><p>Để thêm style cho app component, trong decorator component ta thêm vào thuộc tính <code>styles</code>, style này chỉ được áp dụng bên trong app component.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">styles: [`</div><div class="line">  <span class="selector-class">.animal-list</span> &#123; <span class="attribute">list-style-type</span>: none; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</div><div class="line">  <span class="selector-class">.animal-list</span> <span class="selector-tag">li</span> &#123; <span class="attribute">cursor</span>: pointer; &#125;</div><div class="line">  <span class="selector-class">.animal-list</span> <span class="selector-tag">li</span>:hover &#123; <span class="attribute">cursor</span>: pointer; <span class="attribute">font-weight</span>: bold; &#125;</div><div class="line">  <span class="selector-class">.animal-list</span> <span class="selector-tag">li</span> <span class="selector-class">.type</span> &#123; <span class="attribute">background</span>: <span class="number">#FF9800</span>; <span class="attribute">color</span>: <span class="number">#FFF</span>; <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">4px</span>; <span class="attribute">line-height</span>: <span class="number">1.5em</span>;&#125;</div><div class="line">`]</div></pre></td></tr></table></figure>
<p><a href="http://localhost:8000/images/angular2-animal-list-with-style.png" title="animal list with style" target="_blank" rel="external"><img src="/images/angular2-animal-list-with-style.png" alt="animal list with style"></a><span class="caption">animal list with style</span></p>
<h1 id="Them-su-kien-click"><a href="#Them-su-kien-click" class="headerlink" title="Thêm sự kiện click"></a>Thêm sự kiện click</h1><p>Giờ ta sẽ thêm vào một chức năng, khi click vào một con vật thì sẽ hiển thị thông tin của con vật được chọn.</p>
<p>Trước tiên sửa lại template:</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Animal list<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"animal-list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ng-for</span>=<span class="string">"#animal of animals"</span> (<span class="attr">click</span>)=<span class="string">"select(animal)"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"type"</span>&gt;</span><span class="template-variable">&#123;&#123;animal.type&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><span class="template-variable">&#123;&#123;animal.name&#125;&#125;</span><span class="xml"></span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ng-if</span>=<span class="string">"selectedAnimal"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Selected Animal<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">  (<span class="template-variable">&#123;&#123;selectedAnimal.type&#125;&#125;</span><span class="xml">) </span><span class="template-variable">&#123;&#123;selectedAnimal.name&#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Ở đây ta sẽ sử dụng thêm <code>ng-if</code> (chỉ hiển thị khi điều kiện của ng-if cho giá trị đúng), cũng giống như <code>ng-for</code> ở trên ta phải import <code>NgIf</code> vào và add thêm và phần <code>directives</code> của component.</p>
<p>Trong thẻ <code>&lt;li&gt;</code> ta đã thêm vào <code>(click)=&quot;select(animal)&quot;</code>, nghĩa là khi click vào thẻ <code>li</code> ta Angular sẽ gọi phương thức <code>select</code> của component cùng với tham số là <code>animal</code>. So với AngularJS 1, ta không còn <code>ng-click</code> nữa. Ở đây <code>(click)</code>, dấu ngoặc sẽ xác định mục tiêu là sự kiện click của thẻ <code>li</code>, như vậy ta có thể tạm đoán dấu () sẽ giúp ta có thể làm việc được với bất kỳ sự kiện nào của element.</p>
<p>Tiếp đến, ta cần thêm phương thức <code>select</code> vào component và một thuộc tính <code>selectedAnimal</code>:</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">public</span> <span class="keyword">selectedAnimal;</span></div><div class="line"></div><div class="line"><span class="keyword">select(animal) </span>&#123; this.<span class="keyword">selectedAnimal </span>= animal<span class="comment">; &#125;</span></div></pre></td></tr></table></figure>
<h1 id="Thay-doi-style-cho-con-vat-duoc-chon-voi-ng-class"><a href="#Thay-doi-style-cho-con-vat-duoc-chon-voi-ng-class" class="headerlink" title="Thay đổi style cho con vật được chọn với ng-class"></a>Thay đổi style cho con vật được chọn với ng-class</h1><p>Ta sửa lại thẻ <code>li</code>, thêm vào directive <code>ng-class</code></p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ng-for</span>=<span class="string">"#animal of animals"</span> (<span class="attr">click</span>)=<span class="string">"select(animal)"</span> [<span class="attr">ng-class</span>]=<span class="string">"getSelectedClass(animal)"</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"type"</span>&gt;</span><span class="template-variable">&#123;&#123;animal.type&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><span class="template-variable">&#123;&#123;animal.name&#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
<p>sau đó trong component ta thêm phương thức <code>getSelectedClass</code>:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">getSelectedClass(animal) &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="string">'selected'</span>: animal === <span class="keyword">this</span>.selectedAnimal</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>phương thức này trả về đối tượng với thuộc tính <code>selected</code> bằng <code>true</code> nếu <code>animal</code> trùng với <code>selectedAnimal</code>.</p>
<p><strong>Ghi chú:</strong> <code>ng-class</code> được bọc trong dấu [] đây là cú pháp của <code>property binding</code> mà dữ liệu sẽ đi theo 1 chiều từ nguồn là <code>getSelectedClass(animal)</code> đến đích là property của directive <code>ng-class</code>.</p>
<p>để thấy được sự thay đổi của <code>li</code> sau khi được chọn ta thêm style cho class <code>.selected</code>:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.selected</span> &#123; <span class="attribute">font-weight</span>: bold; &#125;</div></pre></td></tr></table></figure>
<p><a href="http://localhost:8000/images/angular2-animal-selected-animal.png" title="selected animal" target="_blank" rel="external"><img src="/images/angular2-animal-selected-animal.png" alt="selected animal"></a></p>
<h1 id="Tong-ket"><a href="#Tong-ket" class="headerlink" title="Tổng kết"></a>Tổng kết</h1><p>Như vậy là trong phần này ta đã cùng nhau tìm hiểu về một vài directive có sẵn của Angular 2 như <code>ng-for</code> , <code>ng-if</code>, <code>ng-class</code>, cách khai báo directive sử dụng trong component.</p>
<p>Để bind event của element ta sử dụng cặp dấu ngoặc <code>()</code>, để bind property ta dùng cặp dấu ngoặc <code>[]</code>.</p>
<p>Ở phần tiếp theo, ta sẽ cùng dùng thử form trong Angular 2 để add thêm con vật vào sở thú của mình.</p>
<p>Đây là toàn bộ code của phiên bản zoo app hiện tại:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;<span class="type">Component</span>, bootstrap, <span class="type">NgFor</span>, <span class="type">NgIf</span>, <span class="type">NgClass</span>&#125; from <span class="symbol">'angular2</span>/angular2';</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="symbol">'ap</span>p',</div><div class="line">  directives: [<span class="type">NgFor</span>, <span class="type">NgIf</span>, <span class="type">NgClass</span>],</div><div class="line">  template: `</div><div class="line">    &lt;h1&gt;<span class="type">Animal</span> list&lt;/h1&gt;</div><div class="line">    &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"animal-list"</span>&gt;</div><div class="line">      &lt;li *ng-<span class="keyword">for</span>=<span class="string">"#animal of animals"</span> (click)=<span class="string">"select(animal)"</span> [ng-<span class="class"><span class="keyword">class</span>]</span>=<span class="string">"getSelectedClass(animal)"</span>&gt;</div><div class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"type"</span>&gt;&#123;&#123;animal.<span class="keyword">type</span>&#125;&#125;&lt;/span&gt; &#123;&#123;animal.name&#125;&#125;</div><div class="line">      &lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">    &lt;div *ng-<span class="keyword">if</span>=<span class="string">"selectedAnimal"</span>&gt;</div><div class="line">      &lt;h2&gt;<span class="type">Selected</span> <span class="type">Animal</span>&lt;/h2&gt;</div><div class="line">      (&#123;&#123;selectedAnimal.<span class="keyword">type</span>&#125;&#125;) &#123;&#123;selectedAnimal.name&#125;&#125;</div><div class="line">    &lt;/div&gt;</div><div class="line">  `,</div><div class="line">  styles: [`</div><div class="line">    .animal-list &#123; list-style-<span class="class"><span class="keyword">type</span></span>: none; padding: <span class="number">0</span>; &#125;</div><div class="line">    .animal-list li &#123; cursor: pointer; &#125;</div><div class="line">    .animal-list li:hover &#123; cursor: pointer; font-weight: bold; &#125;</div><div class="line">    .animal-list li .<span class="keyword">type</span> &#123; background: #<span class="type">FF9800</span>; color: #<span class="type">FFF</span>; padding: <span class="number">2</span>px <span class="number">4</span>px; line-height: <span class="number">1.5</span>em;&#125;</div><div class="line">    .selected &#123; font-weight: bold; &#125;</div><div class="line">  `]</div><div class="line">&#125;)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</div><div class="line">  public selectedAnimal;</div><div class="line"></div><div class="line">  animals = [</div><div class="line">    &#123; <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'Tige</span>r', name: <span class="symbol">'Bob</span>o'&#125;,</div><div class="line">    &#123; <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'Do</span>g', name: <span class="symbol">'Mi</span>c'&#125;,</div><div class="line">    &#123; <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'Elepha</span>n', name: <span class="symbol">'Bi</span>g'&#125;</div><div class="line">  ];</div><div class="line"></div><div class="line">  select(animal) &#123; <span class="keyword">this</span>.selectedAnimal = animal; &#125;</div><div class="line"></div><div class="line">  getSelectedClass(animal) &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="symbol">'selecte</span>d': animal === <span class="keyword">this</span>.selectedAnimal</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">bootstrap(<span class="type">AppComponent</span>);</div></pre></td></tr></table></figure>
<p>Tiếp theo: <a href="/2015/12/10/lam-quen-voi-angular2-zoo-app-part-2/">zoo app phần 2</a>. (updated)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Trước khi bắt đầu, bạn nên coi qua bài &lt;a href=&quot;/2015/12/02/lam-quen-voi-Angular2-Tao-mot-ung-dung-don-gian-bang-TypeScript/&quot;&gt;Làm quen với Angular 2 - Tạo một ứng dụng bằng TypeScript&lt;/a&gt; để có khái niệm cơ bản về Angular2 và làm việc với Typescript.&lt;/p&gt;
&lt;p&gt;Ở bài này, mình sẽ viết một ứng dụng quản lý sở thú bằng Angular 2 với typescript. Sau khi kết thúc ta sẽ có một ứng dụng như sau:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost:8000/images/angular2-animal-selected-animal.png&quot; title=&quot;zoo app&quot;&gt;&lt;img src=&quot;/images/angular2-animal-selected-animal.png&quot; alt=&quot;zoo app&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Angular2" scheme="http://saysua.com/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>Làm quen với Angular 2 - Tạo một ứng dụng bằng TypeScript</title>
    <link href="http://saysua.com/2015/12/02/lam-quen-voi-Angular2-Tao-mot-ung-dung-don-gian-bang-TypeScript/"/>
    <id>http://saysua.com/2015/12/02/lam-quen-voi-Angular2-Tao-mot-ung-dung-don-gian-bang-TypeScript/</id>
    <published>2015-12-02T07:48:27.000Z</published>
    <updated>2016-10-16T01:41:54.106Z</updated>
    
    <content type="html"><![CDATA[<p>Angular2 hiện tại vẫn đang trong giai đoạn <code>Developer Preview</code> tuy nhiên mình sẽ bắt đầu tìm hiểu trước cho đến khi nó được <code>release</code> thì dùng luôn. Hiện tại trên trang của Angular2 thấy chúng ta có thể code bằng <code>Javascript</code>, <code>Typescript</code> và <code>Dart</code>, nhưng xem qua các bài hướng dẫn thì mọi người có vẻ dùng <code>Typescript</code> phổ biến hơn. Nên mình cũng sẽ làm quen với Angular2 bằng Typescript luôn.</p>
<p>Trong phần làm quen này, chúng ta cùng nhau viết ứng dụng vô cùng đơn giản coi như để biết được Angular2 là cái gì, và viết nó như thế nào. Một ứng dụng Hello World.</p>
<a id="more"></a>
<p>Chúng ta sẽ cùng nhau thực hiện các bước sau:</p>
<ul>
<li>Tạo thư mục</li>
<li>Tạo Component gốc trong file <code>app.ts</code></li>
<li>Nhúng các thư viện và code vào file <code>index.html</code></li>
<li>Chạy ứng dụng</li>
<li>Cải tiến một vài phần cho ứng dụng</li>
</ul>
<h1 id="Tao-thu-muc"><a href="#Tao-thu-muc" class="headerlink" title="Tạo thư mục"></a>Tạo thư mục</h1><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> angular2</div><div class="line"><span class="built_in">cd</span> angular2</div></pre></td></tr></table></figure>
<h1 id="Tao-Component-goc-trong-file-app-ts"><a href="#Tao-Component-goc-trong-file-app-ts" class="headerlink" title="Tạo Component gốc trong file app.ts"></a>Tạo Component gốc trong file app.ts</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;bootstrap, Component&#125; from <span class="string">'angular2/angular2'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Component(&#123;</span></div><div class="line">  selector: <span class="meta-string">'my-app'</span>,</div><div class="line">  template: <span class="meta-string">'&lt;h1&gt;Hello Angular2&lt;/h1&gt;'</span></div><div class="line">&#125;)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123; &#125;</div><div class="line"></div><div class="line">bootstrap(AppComponent);</div></pre></td></tr></table></figure>
<p>Ở trên, mình đã tạo ra một <code>Component</code>, thành phần quan trọng nhất trong Angular 2. Ta có thể coi nó như phần <code>views</code> của ứng dụng. Hiện tại <code>AppComponent</code> của chúng ta là một class rỗng, chưa làm gì cả.</p>
<p>Trong Typescript, dấu <code>@</code> cho ta biết đó là một <code>decoration</code>, nó giống như là metadata cho class.</p>
<ul>
<li>Đầu file, ta import <code>bootstrap</code> và <code>Component</code> từ thư viện angular2 để sử dụng. </li>
<li><code>@Component</code> cho Angular biết <code>AppComponent</code> là một component. Config object của <code>@Component</code> gồm 2 thuộc tính.<ul>
<li><code>selector</code>: CSS selector cho Angular biết component của chúng ta sẽ được áp dụng ở đâu. Như ví dụ trên nó sẽ áp dụng vào element `<my-app></my-app>‘</li>
<li><code>template</code>: Phần hiển thị của component. Tạm thời ta dùng inline code, sau này ta sẽ tách nó ra thành 1 file template riêng.</li>
</ul>
</li>
<li><code>bootstrap</code>: cho Angular biết component này là component gốc của ứng dụng. Sau này trong component gốc ta có thể có các component khác.</li>
</ul>
<h1 id="Nhung-cac-thu-vien-va-code-vao-file-index-html"><a href="#Nhung-cac-thu-vien-va-code-vao-file-index-html" class="headerlink" title="Nhúng các thư viện và code vào file index.html"></a>Nhúng các thư viện và code vào file index.html</h1><p>Trong file <code>index.html</code> ta có code như sau:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Angular 2 Quickstart<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.angularjs.org/tools/system.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.angularjs.org/tools/typescript.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.angularjs.org/2.0.0-alpha.44/angular2.dev.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">      System.config(&#123;</div><div class="line">        transpiler: <span class="string">'typescript'</span>,</div><div class="line">        typescriptOptions: &#123; emitDecoratorMetadata: <span class="literal">true</span> &#125;</div><div class="line">      &#125;);</div><div class="line">      System.import(<span class="string">'./app.ts'</span>);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">my-app</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">my-app</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>Tạm thời ta sẽ không bàn về 3 thư viện ở trên cùng.</li>
<li>Trong đoạn config cho <code>System</code> (từ <code>system.js</code>, đây là một công cụ cho phép ta import code) ta yêu cầu chuyển đổi code từ <code>Typescript</code> sang <code>Javascript</code> ngay trên trình duyệt.</li>
<li>Import <code>AppComponent</code> của chúng ta từ file <code>app.ts</code></li>
<li>Trong <code>&lt;body&gt;</code> ta thêm một element <code>&lt;my-app&gt;</code>, chính là selector của <code>AppComponent</code> đã viết ở trên.</li>
</ul>
<h1 id="Chay-ung-dung"><a href="#Chay-ung-dung" class="headerlink" title="Chạy ứng dụng"></a>Chạy ứng dụng</h1><p>Để chạy ứng dụng ta cần 1 static file server, ở đây mình sẽ dung <code>live-server</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g live-<span class="keyword">server</span></div><div class="line">cd /<span class="keyword">path</span>/<span class="keyword">to</span>/<span class="keyword">source</span></div><div class="line">live-<span class="keyword">server</span></div></pre></td></tr></table></figure>
<p><img src="/images/hello-angular2.png" alt="Hello Angular 2"></p>
<p>Chúc mừng, ứng dụng angular 2 đầu tiên của bạn đã hoàn thành.</p>
<h1 id="Cai-tien"><a href="#Cai-tien" class="headerlink" title="Cải tiến"></a>Cải tiến</h1><p>Ở đây có một vài phần chúng ta sẽ cần phải cải tiến cho ứng dụng của mình.</p>
<ol>
<li>Cấu trúc lại ứng dụng cho việc phát triển sau này</li>
<li>Sử dụng resource từ local thay vì tải từ mạng:<br>Tải resource từ trên mạng thì hiện tại vẫn ổn, nhưng trong quá trình dev mỗi lần ta reload lại trình duyệt ta sẽ mất thêm thời gian tải các resource từ mạng, vì vậy ta đưa các file resource về máy mình rồi tải lại sẽ nhanh hơn.</li>
<li>Chuyển đổi Typescript sang Javascript bằng công cụ thay vì trên trình duyệt:<br>Vì việc chuyển đổi thực hiện trên trình duyệt sẽ khiến cho ứng dụng của chúng ta trở nên chậm, khi có nhiều file cần phải xử lý. Vì vậy ta sẽ đổi sang javascript trước rồi mới để trình duyệt tải vào.</li>
<li>Sử dụng một vài công cụ cho việc dev (Như là công cụ để thực hiện mục 3)</li>
</ol>
<h2 id="Cau-truc-lai-ung-dung-cho-viec-phat-trien-sau-nay"><a href="#Cau-truc-lai-ung-dung-cho-viec-phat-trien-sau-nay" class="headerlink" title="Cấu trúc lại ứng dụng cho việc phát triển sau này"></a>Cấu trúc lại ứng dụng cho việc phát triển sau này</h2><p>Trong thư mục hiện tại, ta tạo thêm thư mục <code>src</code> và thư mục con của nó <code>app</code>. Di chuyển <code>index.html</code> vào thư mục <code>src</code> và <code>app.ts</code> vào thư mục <code>src/app</code>.</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">angular2</div><div class="line">  |<span class="string">- src</span></div><div class="line">      |<span class="string">- app</span></div><div class="line">      |<span class="string">   </span>|<span class="string">- app.ts</span></div><div class="line">      |<span class="string">- index.html</span></div></pre></td></tr></table></figure>
<h2 id="Cai-dat-cac-package-npm"><a href="#Cai-dat-cac-package-npm" class="headerlink" title="Cài đặt các package npm"></a>Cài đặt các package npm</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">npm</span> <span class="selector-tag">init</span> <span class="selector-tag">-y</span></div><div class="line"><span class="selector-tag">npm</span> <span class="selector-tag">i</span> <span class="selector-tag">angular2</span>@<span class="keyword">2</span>.<span class="keyword">0</span>.<span class="keyword">0</span>-<span class="keyword">alpha</span>.<span class="keyword">44</span> systemjs@<span class="number">0.19</span>.<span class="number">2</span> --save --save-exact</div><div class="line">npm i typescript live-server --save-dev</div></pre></td></tr></table></figure>
<ul>
<li><code>angular</code>: thư viện angular</li>
<li><code>systemjs</code>: hỗ trợ module loading</li>
</ul>
<p>Ngoài ra có 2 packages hỗ trợ cho việc dev</p>
<ul>
<li><code>typescript</code>: chuyển đổi typesript sang javascript</li>
<li><code>live-server</code>: static server tự động reload lại trang web khi file thay đổi</li>
</ul>
<p>Sau khi chạy lệnh cài đặt xong ta có file <code>package.json</code> như sau:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"angular2-quickstart"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"keywords"</span>: [],</div><div class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"angular2"</span>: <span class="string">"2.0.0-alpha.44"</span>,</div><div class="line">    <span class="attr">"systemjs"</span>: <span class="string">"0.19.2"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"live-server"</span>: <span class="string">"^0.8.2"</span>,</div><div class="line">    <span class="attr">"typescript"</span>: <span class="string">"^1.7.3"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Tìm đến phần <code>scripts</code> sửa lại:</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">  <span class="string">"tsc"</span>: <span class="string">"tsc -p src -w"</span>,</div><div class="line">  <span class="string">"start"</span>: <span class="string">"live-server --open=src"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Cap-nhat-lai-file-index-html"><a href="#Cap-nhat-lai-file-index-html" class="headerlink" title="Cập nhật lại file index.html"></a>Cập nhật lại file index.html</h2><p>Nạp resource từ thư mục ta vừa cài các packages</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/systemjs/dist/system.src.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/angular2/bundles/angular2.dev.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Cập nhật lại cấu hình của <code>System</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">  System.config(&#123;</div><div class="line">    packages: &#123;<span class="string">'app'</span>: &#123;defaultExtension: <span class="string">'js'</span>&#125;&#125;</div><div class="line">  &#125;);</div><div class="line">  System.import(<span class="string">'app/app'</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Vì bây giờ ta không chuyển đổi typescript ngay trên trình duyệt nữa, mà sẽ chạy lệnh chuyển đổi từ máy trước, nên trên trình duyệt ta chỉ nạp các file js.</p>
<h2 id="Cau-hinh-cho-viec-bien-dich-typescript"><a href="#Cau-hinh-cho-viec-bien-dich-typescript" class="headerlink" title="Cấu hình cho việc biên dịch typescript"></a>Cấu hình cho việc biên dịch typescript</h2><p>Trong thư mục <code>src</code> ta thêm file <code>tsconfig.json</code> với nội dung như sau:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"compilerOptions"</span>: &#123;</div><div class="line">    <span class="attr">"target"</span>: <span class="string">"ES5"</span>,</div><div class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</div><div class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"emitDecoratorMetadata"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"removeComments"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Bạn có thể xem thêm các tùy chọn tại đây <a href="https://github.com/Microsoft/TypeScript/wiki/tsconfig.json" target="_blank" rel="external">Typescript config</a></p>
<h2 id="Bien-dich-typescript-sang-javascript"><a href="#Bien-dich-typescript-sang-javascript" class="headerlink" title="Biên dịch typescript sang javascript"></a>Biên dịch typescript sang javascript</h2><p>Di chuyển đến thư mục gốc của ứng dụng, chạy lệnh <code>tsc</code> mà ta vừa thêm vào <code>package.json</code> ở trên:</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">run</span><span class="bash"> tsc</span></div></pre></td></tr></table></figure>
<p>Sau khi chạy, ta sẽ thấy trong thư mục <code>src/app</code> có thêm file <code>app.js</code> và <code>app.js.map</code> file này giúp ích cho ta trong việc debug giữa file javascript và file typescript. Vì đã thêm tham số <code>-w</code> nên câu lệnh sẽ tiếp tục <code>watch</code>-theo dõi các file typescript, khi có thay đổi nó sẽ tự biên dịch lại. Bạn cứ để nó chạy ở đó, nếu muốn dừng thì nhấn <code>Ctrl+C</code>.</p>
<h2 id="Chay-ung-dung-1"><a href="#Chay-ung-dung-1" class="headerlink" title="Chạy ứng dung"></a>Chạy ứng dung</h2><p>Mở một cửa sổ terminal khác, di chuyển đến thư mục gốc của ứng dụng và chạy lệnh:</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> start</div></pre></td></tr></table></figure>
<p>Và trình duyệt lại chạy lên, hiển thị ứng dụng của chúng ta với chữ <strong>“Hello Angular2”</strong></p>
<h2 id="Thay-doi-noi-dung"><a href="#Thay-doi-noi-dung" class="headerlink" title="Thay đổi nội dung"></a>Thay đổi nội dung</h2><p>Như đã nói ở trên, công cụ biên dịch typescript của chúng ta sẽ tự động biên dịch lại khi nội dung file thay đổi, và live-server cũng tự động tải lại trang khi nội dung file thay đổi. Bây giờ bạn vào file <code>app.ts</code> thử thay đổi lại <code>template</code> của component và xem trình duyệt tự động cập nhật lại nội dung cho bạn như thế nào.</p>
<h1 id="Tong-ket"><a href="#Tong-ket" class="headerlink" title="Tổng kết"></a>Tổng kết</h1><ul>
<li>Angular 2 có phần quan trọng nhất là <code>Component</code></li>
<li>Ta có thể dùng Typescript để viết ứng dụng với Angular 2 và biên dịch ra javascript bằng <strong>T</strong>ype<strong>s</strong>cript <strong>C</strong>ompiler (TSC)</li>
<li>Bằng cách để Compiler theo dõi file và sử dụng live-server ta có thể thấy được ứng dụng thay đổi nhanh chóng sau khi thay đổi code</li>
<li>Đây chỉ là một ứng dụng rất đơn giản, để làm quen với Angular 2</li>
</ul>
<p>Các thao tác trong bài này mình hoàn toàn theo bài hướng dẫn tại <a href="https://angular.io/docs/ts/latest/quickstart.html" target="_blank" rel="external">Angular Quickstart</a> các bạn có thể đọc để nắm thêm chi tiết.</p>
<h1 id="Trinh-duyet-ho-tro-ES6"><a href="#Trinh-duyet-ho-tro-ES6" class="headerlink" title="Trình duyệt hỗ trợ ES6"></a>Trình duyệt hỗ trợ ES6</h1><p>Angular 2 yêu cầu trình duyệt hỗ trợ ES6, hầu hết đều đã được hỗ trợ với các trình duyệt hiện tại. Tuy nhiên với các trình duyệt cũ hơn như IE11 ta có thể dùng thêm thư viện <code>shim</code></p>
<p>Cài đặt <code>shim</code></p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install </span>es6-<span class="keyword">shim </span>--save</div></pre></td></tr></table></figure>
<p>Thêm vào <code>index.html</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/es6-shim/es6-shim.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Angular2 hiện tại vẫn đang trong giai đoạn &lt;code&gt;Developer Preview&lt;/code&gt; tuy nhiên mình sẽ bắt đầu tìm hiểu trước cho đến khi nó được &lt;code&gt;release&lt;/code&gt; thì dùng luôn. Hiện tại trên trang của Angular2 thấy chúng ta có thể code bằng &lt;code&gt;Javascript&lt;/code&gt;, &lt;code&gt;Typescript&lt;/code&gt; và &lt;code&gt;Dart&lt;/code&gt;, nhưng xem qua các bài hướng dẫn thì mọi người có vẻ dùng &lt;code&gt;Typescript&lt;/code&gt; phổ biến hơn. Nên mình cũng sẽ làm quen với Angular2 bằng Typescript luôn.&lt;/p&gt;
&lt;p&gt;Trong phần làm quen này, chúng ta cùng nhau viết ứng dụng vô cùng đơn giản coi như để biết được Angular2 là cái gì, và viết nó như thế nào. Một ứng dụng Hello World.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Angular2" scheme="http://saysua.com/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>Lowdb - DB không cần server</title>
    <link href="http://saysua.com/2015/09/30/lowdb-DB-khong-can-server/"/>
    <id>http://saysua.com/2015/09/30/lowdb-DB-khong-can-server/</id>
    <published>2015-09-30T02:34:51.000Z</published>
    <updated>2016-10-16T01:42:23.797Z</updated>
    
    <content type="html"><![CDATA[<p>Từ yêu cầu cá nhân, mình cần  tạo một server API giả bằng nodejs để phục vụ cho việc làm frontend. Mình có ý muốn tìm một thư viện DB nhỏ gọn, dễ cài đặt sử dụng, hỗ trợ JSON, chỉ dựa trên file text đơn giản, chứ không cần phải cài đặt server như mongoDB và nếu thao tác giống như mongoDB thì tốt.</p>
<p>Sau một hồi dạo quanh thì mình đã tìm thấy <a href="https://github.com/typicode/lowdb" target="_blank" rel="external">LowDB</a></p>
<blockquote><p>Need a quick way to get a local database?</p>
</blockquote>
<a id="more"></a>
<h1 id="Cai-dat"><a href="#Cai-dat" class="headerlink" title="Cài đặt"></a>Cài đặt</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> lowdb <span class="comment">--save</span></div></pre></td></tr></table></figure>
<h1 id="Su-dung"><a href="#Su-dung" class="headerlink" title="Sử dụng"></a>Sử dụng</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> low = require(<span class="string">'lowdb'</span>)</div><div class="line"><span class="selector-tag">var</span> db = low(<span class="string">'db.json'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="title">db</span><span class="params">(<span class="string">'posts'</span>)</span></span>.push(&#123; title: <span class="string">'lowdb is awesome'</span>&#125;)</div></pre></td></tr></table></figure>
<p>Ở đây, dự liệu sẽ được tự động lưu vào file <code>db.json</code></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"posts"</span>: [</div><div class="line">    &#123; <span class="attr">"title"</span>: <span class="string">"lowdb is awesome"</span> &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Mot-vai-thao-tac-su-dung-co-ban"><a href="#Mot-vai-thao-tac-su-dung-co-ban" class="headerlink" title="Một vài thao tác sử dụng cơ bản"></a>Một vài thao tác sử dụng cơ bản</h1><p><code>LowDB</code> này sử dụng <code>lodash</code>, nên thao tác với API của nó cũng giống như thao tác với API của <code>lodash</code> vậy.</p>
<h2 id="Them-du-lieu"><a href="#Them-du-lieu" class="headerlink" title="Thêm dữ liệu"></a>Thêm dữ liệu</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">db</span>(<span class="string">'users'</span>)<span class="selector-class">.push</span>(&#123; <span class="attribute">name</span>: <span class="string">'Thach Nguyen'</span>, <span class="attribute">email</span>: <span class="string">'thach@email.com'</span>, <span class="attribute">role</span>: <span class="string">'admin'</span>&#125;);</div></pre></td></tr></table></figure>
<h2 id="Tim-1-doi-tuong"><a href="#Tim-1-doi-tuong" class="headerlink" title="Tìm 1 đối tượng"></a>Tìm 1 đối tượng</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">db</span>(<span class="string">'users'</span>)<span class="selector-class">.find</span>(&#123;<span class="attribute">email</span>: <span class="string">'thach@email.com'</span>&#125;);</div></pre></td></tr></table></figure>
<h2 id="Tim-nhieu-doi-tuong"><a href="#Tim-nhieu-doi-tuong" class="headerlink" title="Tìm nhiều đối tượng"></a>Tìm nhiều đối tượng</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">db</span><span class="params">(<span class="string">'users'</span>)</span></span>.<span class="attribute">filter</span>(&#123;role: <span class="string">'admin'</span>&#125;);</div></pre></td></tr></table></figure>
<h2 id="Cap-nhat-du-lieu"><a href="#Cap-nhat-du-lieu" class="headerlink" title="Cập nhật dữ liệu"></a>Cập nhật dữ liệu</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">db</span>(<span class="string">'users'</span>)</div><div class="line">  <span class="selector-class">.chain</span>()</div><div class="line">  <span class="selector-class">.find</span>(&#123;<span class="attribute">email</span>: <span class="string">'thach@email.com'</span>&#125;)</div><div class="line">  <span class="selector-class">.assign</span>(&#123;<span class="attribute">role</span>: <span class="string">'member'</span>&#125;)</div><div class="line">  <span class="selector-class">.value</span>();</div></pre></td></tr></table></figure>
<h2 id="Xoa-du-lieu"><a href="#Xoa-du-lieu" class="headerlink" title="Xóa dữ liệu"></a>Xóa dữ liệu</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">db</span>(<span class="string">'users'</span>)<span class="selector-class">.remove</span>(&#123;<span class="attribute">role</span>: <span class="string">'member'</span>&#125;);</div></pre></td></tr></table></figure>
<h2 id="Lay-so-luong-users"><a href="#Lay-so-luong-users" class="headerlink" title="Lấy số lượng users"></a>Lấy số lượng users</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">db</span>(<span class="string">'users'</span>)<span class="selector-class">.size</span>();</div></pre></td></tr></table></figure>
<h2 id="Ho-tro-ID"><a href="#Ho-tro-ID" class="headerlink" title="Hỗ trợ ID"></a>Hỗ trợ ID</h2><p>Có 2 cách tạo ID cho dữ liệu.</p>
<ul>
<li>Sử dụng <a href="https://github.com/typicode/underscore-db" target="_blank" rel="external">underscore-db</a></li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> db = low(<span class="string">'db.json'</span>)</div><div class="line"></div><div class="line">db._.mixin(require(<span class="string">'underscore-db'</span>))</div><div class="line"></div><div class="line"><span class="selector-tag">var</span> songId = db(<span class="string">'songs'</span>).insert(&#123; title: <span class="string">'low!'</span> &#125;)<span class="selector-class">.id</span></div><div class="line"><span class="selector-tag">var</span> song   = db(<span class="string">'songs'</span>).getById(songId)</div></pre></td></tr></table></figure>
<ul>
<li>Dùng <a href="https://github.com/broofa/node-uuid" target="_blank" rel="external">uuid</a></li>
</ul>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> uuid = <span class="built_in">require</span>(<span class="string">'uuid'</span>)</div><div class="line"></div><div class="line"><span class="built_in">var</span> songId = db(<span class="string">'songs'</span>).push(&#123; <span class="attribute">id:</span><span class="string"> uuid</span>(), <span class="attribute">title</span>: <span class="string">'low!'</span> &#125;).id</div><div class="line"><span class="built_in">var</span> song   = db(<span class="string">'songs'</span>).find(&#123; <span class="attribute">id:</span><span class="string"> songId</span> &#125;)</div></pre></td></tr></table></figure>
<h1 id="Ket"><a href="#Ket" class="headerlink" title="Kết"></a>Kết</h1><p>Theo tác giả của lowDB thì:</p>
<p>Nếu các bạn muốn tìm một DB nhanh gọn, không cần cài đặt server thì <code>lowdb</code> này là một lựa chọn hợp lý. Còn bình thường thì cứ dùng MongoDB hoặc các DB khác. :)</p>
<p>Các bạn có thể đọc thêm cách sử dụng ở đây: <a href="https://github.com/typicode/lowdb" target="_blank" rel="external">https://github.com/typicode/lowdb</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Từ yêu cầu cá nhân, mình cần  tạo một server API giả bằng nodejs để phục vụ cho việc làm frontend. Mình có ý muốn tìm một thư viện DB nhỏ gọn, dễ cài đặt sử dụng, hỗ trợ JSON, chỉ dựa trên file text đơn giản, chứ không cần phải cài đặt server như mongoDB và nếu thao tác giống như mongoDB thì tốt.&lt;/p&gt;
&lt;p&gt;Sau một hồi dạo quanh thì mình đã tìm thấy &lt;a href=&quot;https://github.com/typicode/lowdb&quot;&gt;LowDB&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Need a quick way to get a local database?&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Nodejs" scheme="http://saysua.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Import mysql từ file zip</title>
    <link href="http://saysua.com/2015/09/08/import-mysql-tu-file-zip/"/>
    <id>http://saysua.com/2015/09/08/import-mysql-tu-file-zip/</id>
    <published>2015-09-08T04:05:24.000Z</published>
    <updated>2016-10-16T01:41:15.387Z</updated>
    
    <content type="html"><![CDATA[<p>Vừa rồi mình phải import dữ liệu mysql từ một file zip khoảng 700MB nhưng khi giải nén ra thì đến 4GB lận. Để import quả là không đơn giản. Và rồi cũng đã tìm được 1 cách import với chỉ 1 câu lệnh:</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unzip -p dbdump.sql.zip <span class="string">| mysql -u root -p dbname</span></div></pre></td></tr></table></figure>
<ul>
<li>Câu lệnh này chỉ thực hiện được với điều kiện file zip của bạn chỉ có 1 file sql.</li>
<li>Thay <code>root</code> bằng user mysql của bạn</li>
<li>Thay <code>dbname</code> bằng tên của DB</li>
<li>Nhập password vào và chờ kết thúc.</li>
</ul>
<p>Cách này mình tìm được từ đây: <a href="http://snippets.khromov.se/import-zipped-mysql-dumps/" target="_blank" rel="external">http://snippets.khromov.se/import-zipped-mysql-dumps/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vừa rồi mình phải import dữ liệu mysql từ một file zip khoảng 700MB nhưng khi giải nén ra thì đến 4GB lận. Để import quả là không đơn giả
    
    </summary>
    
    
      <category term="Mysql" scheme="http://saysua.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Tạm biệt wordpress xin chào hexo</title>
    <link href="http://saysua.com/2015/08/27/tam-biet-wordpress-xin-chao-hexo/"/>
    <id>http://saysua.com/2015/08/27/tam-biet-wordpress-xin-chao-hexo/</id>
    <published>2015-08-27T00:05:20.000Z</published>
    <updated>2016-10-15T09:27:50.958Z</updated>
    
    <content type="html"><![CDATA[<p>Như vậy là sau vài lần tìm kiếm và thử nghiệm, cuối cùng cũng đã tìm ra một cách viết blog mới để thay thế cho em wordpress. Với sở thích đơn giản, thích nghịch ngợm nên với mình wordpress tỏ ra cồng kềnh nhiều tính năng không dùng đến. Mình muốn một cách viết blog đơn giản như là dùng markdown để viết, không cần dùng cơ sở dữ liệu, tận dụng được hosting đang có.</p>
<a id="more"></a>
<p>Trước đây mình đã thử với một sản phẩm viết blog bằng python, sau khi viết xong nó tự động generate ra các file html rồi up lên host. Nhưng mà python thì mình cũng không thích lắm, muốn một cái tương tự bằng node. Và rồi mình tìm thấy <a href="https://hexo.io/" target="_blank" rel="external">hexo</a></p>
<blockquote><p>A fast, simple &amp; powerful blog framework</p>
</blockquote>
<p>Giới thiệu chung thì đây là một nền tảng viết blog bằng nodejs:</p>
<ul>
<li>Viết bài bằng markdown</li>
<li>Có giả lập server để test trên localhost</li>
<li>Tự động generate ra file html</li>
<li>Có các tùy chọn để deploy qua git, fpt, ssh</li>
</ul>
<p>Khi viết thì chỉ cần tạo ra một file <code>.md</code>, dùng một phần mềm editor bất kỳ để viết nội dung rồi sau đó deploy.</p>
<p>Có khi các bạn nhìn vào thấy nó phức tạp hơn wordpress nhiều nhưng bản thân mình thì thấy nó rất thú vị và quyết định đưa em <code>hexo</code> vào đội.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Như vậy là sau vài lần tìm kiếm và thử nghiệm, cuối cùng cũng đã tìm ra một cách viết blog mới để thay thế cho em wordpress. Với sở thích đơn giản, thích nghịch ngợm nên với mình wordpress tỏ ra cồng kềnh nhiều tính năng không dùng đến. Mình muốn một cách viết blog đơn giản như là dùng markdown để viết, không cần dùng cơ sở dữ liệu, tận dụng được hosting đang có.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Xử lý hình ảnh hiển thị sai hướng bằng cách xác định giá trị EXIF orientation</title>
    <link href="http://saysua.com/2015/08/06/xu-ly-hinh-anh-hien-thi-sai-huong-voi-exif-orientation/"/>
    <id>http://saysua.com/2015/08/06/xu-ly-hinh-anh-hien-thi-sai-huong-voi-exif-orientation/</id>
    <published>2015-08-06T03:13:37.000Z</published>
    <updated>2016-10-16T01:44:01.701Z</updated>
    
    <content type="html"><![CDATA[<p>Trong thời gian này mình có làm một ứng dụng chat, trong đó có tính năng upload file và hình ảnh. Và mình đã gặp một vấn đề với các hình ảnh được chụp bằng điện thoại. Đó là hình ảnh bị hiển thị sai hướng, do khi chụp người dùng đã để dọc điện thoại, dẫn đến lúc hiển thị hình ảnh trên trang web, thay vì hình ảnh hiển thị thẳng đứng thì lại nằm ngang. Giống như thế này:</p>
<p><img src="/images/orientation-6.jpg" alt="Orientation 6"></p>
<p>Và công việc của mình là phải xác định được, hình ảnh đó bị sai thế nào, để hiển thị lại cho đúng.</p>
<a id="more"></a>
<p>Để làm được việc này, trước tiên mình cần phải xác định được một thuộc tính của hình ảnh mà qua đó mình biết được hình ảnh đó đang bị quay theo hướng nào. Sau một hồi tìm kiếm, mình đã phát hiện ra thuộc tính <code>EXIF:orientation</code> sẽ cho ta biết được điều này:</p>
<p><code>EXIF</code>: Exchangeable image file format (đây là một chuẩn để lưu giữ các thông tin thông số của ảnh như chế độ flash, ngày tạo, ống kính thế nào. Các bạn có thể coi ở đây chi tiết các thông số nó có thể lưu <a href="http://forum.vietdesigner.net/threads/thuat-ngu-exif-anh-anh-viet.27870/" target="_blank" rel="external">http://forum.vietdesigner.net/threads/thuat-ngu-exif-anh-anh-viet.27870/</a>)</p>
<p>Tất nhiên là mình không cần phải biết hết các thông số này, ở đây có một thông số đặc biệt mình cần dùng đó là <code>orientation</code> thông số cho biết hướng của ảnh.</p>
<p>Hình vẽ dưới đây sẽ cho các bạn biết được các giá trị của orientation và ví dụ:</p>
<p><img src="/images/EXIF_Orientations.gif" alt="Orientation 6"><br>(Hình ảnh được lấy từ <a href="http://www.daveperrett.com/articles/2012/07/28/exif-orientation-handling-is-a-ghetto/" target="_blank" rel="external">http://www.daveperrett.com/articles/2012/07/28/exif-orientation-handling-is-a-ghetto/</a>)</p>
<p>Như hình vẽ, ta thấy nếu orientation là 6, nghĩa là hình ảnh đã bị xoay sang trái 90 độ). Vậy là chỉ cần lấy được giá trị EXIF:orientation là xong. Lúc này mình sẽ cần đến thư viện <code>exif-js</code> (<a href="https://github.com/exif-js/exif-js" target="_blank" rel="external">https://github.com/exif-js/exif-js</a>) để lấy giá trị orientation:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;img id=<span class="string">"test-img"</span> src=<span class="string">"url/of/image"</span> /&gt;</div><div class="line"></div><div class="line"><span class="keyword">var</span> element = $(<span class="string">'#test-img'</span>);</div><div class="line"></div><div class="line">element.bind(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  EXIF.getData(element[<span class="number">0</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> orientation = EXIF.getTag(element[<span class="number">0</span>], <span class="string">'Orientation'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Sau khi đã có được orientation, ta dựa vào từng giá trị tương ứng để xoay ảnh lại cho thích hợp, ở đây mình sử dụng thuộc tính <code>transform</code> của css để xoay ảnh:</p>
<p>Ví dụ với orientation là 6 mình sẽ xoay ảnh thế này:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">function</span> <span class="selector-tag">setTransform</span>(transform) &#123;</div><div class="line">  <span class="selector-tag">element</span><span class="selector-class">.css</span>(<span class="string">'-ms-transform'</span>, transform);</div><div class="line">  <span class="selector-tag">element</span><span class="selector-class">.css</span>(<span class="string">'-webkit-transform'</span>, transform);</div><div class="line">  <span class="selector-tag">element</span><span class="selector-class">.css</span>(<span class="string">'-moz-transform'</span>, transform);</div><div class="line">  <span class="selector-tag">element</span><span class="selector-class">.css</span>(<span class="string">'transform'</span>, transform);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">setTransform</span>(<span class="string">'rotate(90deg)'</span>);</div></pre></td></tr></table></figure>
<p>Làm tương tự với các giá trị orientation khác là coi như giải quyết được vấn đề. Trong vấn đề thực của mình gặp phải, mình đã viết 1 directive của Angularjs để xử lý, các bạn có thể coi ở đây: <a href="https://gist.github.com/thachnuida/2f76fe3aaa15dbd1dfa3" target="_blank" rel="external">https://gist.github.com/thachnuida/2f76fe3aaa15dbd1dfa3</a></p>
<p>Ngoài ra, mình thấy hiện tại bên trình duyệt firefox đang hỗ trợ một thuộc tính <code>image-orientation</code> (<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/image-orientation" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/CSS/image-orientation</a>) nhưng mà cũng chỉ có duy nhất mỗi nó đang hỗ trợ, nên có lẽ cần đợi thêm thời giãn xem sao.</p>
<p>Hoặc là cũng có một cách sử dụng thư viện load image để load hình ảnh vào canvas như ở đây <a href="http://stackoverflow.com/questions/20600800/js-client-side-exif-orientation-rotate-and-mirror-jpeg-images" target="_blank" rel="external">http://stackoverflow.com/questions/20600800/js-client-side-exif-orientation-rotate-and-mirror-jpeg-images</a></p>
<p>Cách giải quyết của mình ở đây là chỉ ở phía client, còn khi mình upload lên server thì mình có sử dung thư viện để sửa lại hình ảnh cho đúng rồi. :D Hy vọng bài viết này mang lại cho các bạn một chút thú vị trong ngày.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Trong thời gian này mình có làm một ứng dụng chat, trong đó có tính năng upload file và hình ảnh. Và mình đã gặp một vấn đề với các hình ảnh được chụp bằng điện thoại. Đó là hình ảnh bị hiển thị sai hướng, do khi chụp người dùng đã để dọc điện thoại, dẫn đến lúc hiển thị hình ảnh trên trang web, thay vì hình ảnh hiển thị thẳng đứng thì lại nằm ngang. Giống như thế này:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/orientation-6.jpg&quot; alt=&quot;Orientation 6&quot;&gt;&lt;/p&gt;
&lt;p&gt;Và công việc của mình là phải xác định được, hình ảnh đó bị sai thế nào, để hiển thị lại cho đúng.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://saysua.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Khởi tạo dự án AngularJS với generator-boom</title>
    <link href="http://saysua.com/2014/10/11/khoi-tao-du-an-angularjs-voi-generator-boom/"/>
    <id>http://saysua.com/2014/10/11/khoi-tao-du-an-angularjs-voi-generator-boom/</id>
    <published>2014-10-11T09:03:00.000Z</published>
    <updated>2016-10-16T01:41:43.189Z</updated>
    
    <content type="html"><![CDATA[<p>Khi bắt đầu một dự án AngularJS chúng ta có rất nhiều việc phải làm như tạo cấu trúc thư mục, viết code để tự động build các file js, css, chuẩn bị code để test… Dĩ nhiên ta có thể tự mình lần lượt làm các việc đó, hoặc như trước đây, tôi tạo sẵn một thư mục dự án mẫu rồi khi nào dùng sẽ copy qua dùng lại. Tuy nhiên vẫn tốt hơn nếu như có một công cụ giúp mình làm các việc kể trên, và trong bài này tôi giới thiệu đến các bạn công cụ <a href="https://www.npmjs.org/package/generator-boom" target="_blank" rel="external">generator-boom</a>, một công cụ sinh code AngularJS dành cho Yeoman.</p>
<h1 id="Cai-dat-generator-boom"><a href="#Cai-dat-generator-boom" class="headerlink" title="Cài đặt generator-boom"></a>Cài đặt generator-boom</h1><a id="more"></a>
<p>Để có thể dùng generator-boom ta cần phải cài:</p>
<ul>
<li><p><a href="http://nodejs.org/" target="_blank" rel="external">NodeJS</a></p>
</li>
<li><p>Yeoman</p>
<p><code>$ npm install -g yo</code></p>
</li>
<li><p>Generator-boom</p>
<p><code>$ npm install -g generator-boom</code></p>
</li>
<li><p>Bower</p>
<p><code>$ npm install -g bower</code></p>
</li>
<li><p>Gulp : Generator-boom sử dụng Gulp để build code nên ta cài đặt Gulp luôn</p>
<p><code>$ npm install -g gulp</code></p>
</li>
</ul>
<h1 id="Khoi-tao-du-an-bang-generator-boom"><a href="#Khoi-tao-du-an-bang-generator-boom" class="headerlink" title="Khởi tạo dự án bằng generator-boom"></a>Khởi tạo dự án bằng generator-boom</h1><p>Đúng như tên gọi của nó “Boom”, chỉ cần một câu lệnh và boom tất cả đã xong.</p>
<ul>
<li><p>Di chuyển đến thư mục code của bạn</p>
<p><code>$ cd /path/to/your/code</code></p>
</li>
<li><p>Gõ lệnh</p>
<p><code>$ yo boom [app-name]</code></p>
<p><strong>app-name</strong> ở đây là tên module chính cho dự án angularjs của bạn.</p>
</li>
</ul>
<p>Sau đó công cụ sẽ hỏi bạn một vài câu hỏi như bạn có muốn nhúng thư viện jquery vào không, muốn sử dụng những thành phần nào của angularjs… Cuối cùng, công cụ sẽ tạo thư mục code cho bạn, tự động tải các thư viện liên quan về. Xong, giờ là thời gian cho bạn viết code, chỉ mất chưa đầy 1 phút.</p>
<h1 id="Generator-boom-co-gi"><a href="#Generator-boom-co-gi" class="headerlink" title="Generator-boom có gì?"></a>Generator-boom có gì?</h1><p>Dưới đầy là một vài đặc điểm của generator-boom:</p>
<ul>
<li>Sử dụng Gulp để build code.</li>
<li>LiveReload: khi sửa code, tự động tải lại trang web.</li>
<li>Code của Development và Production được tách riêng.</li>
<li>Sử dụng JsHint để kiểm tra JS code.</li>
<li>Có sẵn Protractor cho E2E testing.</li>
<li>Một đống các câu lệnh giúp tạo nhanh file style, controller, service …</li>
</ul>
<h1 id="Cau-truc-cua-du-an-do-boom-tao-ra"><a href="#Cau-truc-cua-du-an-do-boom-tao-ra" class="headerlink" title="Cấu trúc của dự án do boom tạo ra"></a>Cấu trúc của dự án do boom tạo ra</h1><p>Dự án của boom tạo ra có cấu trúc phân chia rõ ràng các thành phần:</p>
<pre>- app/
    |- css/
        |- application.scss
        |- fonts.css
    |- fonts/
    |- img/
    |- js/
        |- controllers/
        |- directives/
        |- factories/
        |- filters/
        |- libs/
        |- providers/
        |- services/
        |- app.js
    |- templates/
    |- index.html
    |- bower.json
    |- package.json
    |- gulpfile.js
</pre>

<h1 id="Chay-code"><a href="#Chay-code" class="headerlink" title="Chạy code"></a>Chạy code</h1><p>Để chạy dự án ta gõ lệnh:</p>
<p><code>$ gulp</code></p>
<p>Khi đó Gulp sẽ tự động tạo 1 thư mục build, đưa các files cần chạy vào đó và mở 1 tab mới trên trình duyệt vào trang chủ của dự án.</p>
<h1 id="Build-code-cho-phien-ban-Production"><a href="#Build-code-cho-phien-ban-Production" class="headerlink" title="Build code cho phiên bản Production"></a>Build code cho phiên bản Production</h1><p>Khi đã hoàn thành xong dự án ta muốn build một phiên bản code đã được minify, ta chạy:</p>
<p><code>$ gulp prod</code></p>
<h1 id="Thong-tin-them"><a href="#Thong-tin-them" class="headerlink" title="Thông tin thêm"></a>Thông tin thêm</h1><ul>
<li>Style trong boom có thể dùng scss hoặc css bình thường.</li>
<li>Boom có sẵn các câu lệnh để nhanh chóng tạo file, xem phần Commands trong trang của Boom.</li>
<li>Khi đã chạy Gulp, mỗi lần bạn chỉnh sửa file trình duyệt sẽ tự động tải lại trang web cho bạn.</li>
<li>Mọi thông tin thêm về Boom có thể coi tại đây <a href="https://www.npmjs.org/package/generator-boom" target="_blank" rel="external">Generator-boom</a></li>
</ul>
<h1 id="Ket"><a href="#Ket" class="headerlink" title="Kết"></a>Kết</h1><p>Tất nhiên, công cụ sinh code ngoài generator-boom ra còn rất nhiều, các bạn có thể tự mình tìm hiểu và thử nghiệm. Dù gì đi nữa thì mục đích của các công cụ cũng giúp ta giảm thiểu thời gian tạo dự án, tự động hóa các tác vụ phải làm thường xuyên như build code, kiểm tra code…</p>
<p>Hy vọng các bạn sẽ thích công cụ này, hoặc nếu các bạn đang làm việc với một công cụ khác xin hãy chia sẻ với tôi và mọi người cùng biết tại đây.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Khi bắt đầu một dự án AngularJS chúng ta có rất nhiều việc phải làm như tạo cấu trúc thư mục, viết code để tự động build các file js, css, chuẩn bị code để test… Dĩ nhiên ta có thể tự mình lần lượt làm các việc đó, hoặc như trước đây, tôi tạo sẵn một thư mục dự án mẫu rồi khi nào dùng sẽ copy qua dùng lại. Tuy nhiên vẫn tốt hơn nếu như có một công cụ giúp mình làm các việc kể trên, và trong bài này tôi giới thiệu đến các bạn công cụ &lt;a href=&quot;https://www.npmjs.org/package/generator-boom&quot;&gt;generator-boom&lt;/a&gt;, một công cụ sinh code AngularJS dành cho Yeoman.&lt;/p&gt;
&lt;h1 id=&quot;Cai-dat-generator-boom&quot;&gt;&lt;a href=&quot;#Cai-dat-generator-boom&quot; class=&quot;headerlink&quot; title=&quot;Cài đặt generator-boom&quot;&gt;&lt;/a&gt;Cài đặt generator-boom&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Angularjs" scheme="http://saysua.com/tags/Angularjs/"/>
    
  </entry>
  
  <entry>
    <title>Build your code with Gulp</title>
    <link href="http://saysua.com/2014/01/14/Build-your-code-with-Gulp/"/>
    <id>http://saysua.com/2014/01/14/Build-your-code-with-Gulp/</id>
    <published>2014-01-14T14:28:28.000Z</published>
    <updated>2016-10-16T01:41:00.405Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://gulpjs.com/" target="_blank" rel="external">Gulp</a> is the streaming build system. Gulp’s use of streams and code-over-configuration makes for a simpler and more intuitive build. I didn’t use Gulp or Grunt before. Today, I hear about it and decide to use it on my project. What I write here is not a tutorial, it just what I do with Gulp.</p>
<h2 id="1-Install-–-NodeJS-Gulp"><a href="#1-Install-–-NodeJS-Gulp" class="headerlink" title="1. Install – NodeJS - Gulp:"></a>1. Install – NodeJS - Gulp:</h2><p>To install Gulp we must have node installed. Nodejs can be installed from here <a href="http://nodejs.org/" target="_blank" rel="external">http://nodejs.org/</a></p>
<p>– Gulp: We should install gulp globally</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> -g gulp</div></pre></td></tr></table></figure>
<h2 id="2-Using-Gulp-in-project-First-jump-to-your-project-folder"><a href="#2-Using-Gulp-in-project-First-jump-to-your-project-folder" class="headerlink" title="2. Using Gulp in project First, jump to your project folder."></a>2. Using Gulp in project First, jump to your project folder.</h2><a id="more"></a>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cd <span class="regexp">/path/</span>to<span class="regexp">/your/</span><span class="keyword">project</span></div></pre></td></tr></table></figure>
<p>Install <code>gulp</code> and <code>gulp-util</code> in your project as <code>devDepencies</code>. Before it you should have <code>package.json</code> file in your project or init it by</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> init</div><div class="line">$ <span class="built_in">npm</span> install --save-dev gulp gulp-util</div></pre></td></tr></table></figure>
<p><code>--save-dev</code> will let <code>npm</code> add <code>gulp</code> and <code>gulp-util</code> into <code>devDepencies</code> of file <code>package.json</code></p>
<p>Create file <code>gulpfile.js</code>  at your project root with bellow simple content:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> gutil = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// place code for your default task here</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Run gulp</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>gulp</div></pre></td></tr></table></figure>
<h2 id="3-Do-more-with-gulp"><a href="#3-Do-more-with-gulp" class="headerlink" title="3. Do more with gulp"></a>3. Do more with gulp</h2><p>Above is just some step to get started with gulp. You can find here <a href="https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md" target="_blank" rel="external">https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md</a></p>
<p>I want do more with gulp in my project, such as minify JS code, build LESS code to CSS… Let install some gulp plugins and write some simple code. Gulp plugins can be found here: <a href="http://gratimax.github.io/search-gulp-plugins/" target="_blank" rel="external">http://gratimax.github.io/search-gulp-plugins/</a></p>
<p>As my requirement I will install <code>gulp-less</code>, <code>gulp-uglify</code> and <code>gulp-jshint</code>.</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> --save-dev gulp-<span class="keyword">less</span> gulp-uglify gulp-jshint</div></pre></td></tr></table></figure>
<p>Now, we create (make) some tasks for gulp by writing code.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> gutil = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>);</div><div class="line"><span class="keyword">var</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</div><div class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"></div><div class="line"><span class="comment">// jshint task</span></div><div class="line">gulp.task(<span class="string">'jshint'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.src(<span class="string">'./js/*.js'</span>)</div><div class="line">    .pipe(jshint())</div><div class="line">    .pipe(jshint.reporter(<span class="string">'default'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Minify JS code</span></div><div class="line">gulp.task(<span class="string">'minify'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.src(<span class="string">'./js/*.js'</span>)</div><div class="line">    .pipe(uglify())</div><div class="line">    .pipe(gulp.dest(<span class="string">'./dist/js'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Convert less to css</span></div><div class="line">gulp.task(<span class="string">'less'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  gulp.src(<span class="string">'./less/*.less'</span>)</div><div class="line">    .pipe(less())</div><div class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// Run default tasks</span></div><div class="line">  gulp.run(<span class="string">'jshint'</span>, <span class="string">'minify'</span>, <span class="string">'less'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// Watch for JS files changing</span></div><div class="line">  gulp.watch(<span class="string">'./js/*.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.run(<span class="string">'jshint'</span>, <span class="string">'minify'</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// Watch for Less files changing</span></div><div class="line">  gulp.watch(<span class="string">'./less/*.less'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.run(<span class="string">'less'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>There are 4 gulp tasks and they can be called by commands:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>gulp jshint</div><div class="line"></div><div class="line"><span class="variable">$ </span>gulp minify</div><div class="line"></div><div class="line"><span class="variable">$ </span>gulp less</div><div class="line"></div><div class="line"><span class="variable">$ </span>gulp</div></pre></td></tr></table></figure>
<ul>
<li>Task <code>jshint</code>:  This task will check all JS file in folder <code>/js</code> and report error.</li>
<li>Task <code>minify</code>: This task will get all JS files in folder <code>/js</code> , minifies them and save to folder <code>/dist/js</code></li>
<li>Task <code>less</code>: This task will convert all LESS files in folder /less to CSS and save to folder <code>/dist/css</code></li>
<li>Task <code>default</code>: This task will run 3 above tasks and add watching for JS, LESS files. If JS files in folder <code>/js</code> change, it will run task jshint and minify. The same with LESS file in folder <code>/less</code>.</li>
</ul>
<h2 id="Wrapping-UP-After-all-we-can"><a href="#Wrapping-UP-After-all-we-can" class="headerlink" title="Wrapping UP After all, we can:"></a>Wrapping UP After all, we can:</h2><ul>
<li>Install NodeJS</li>
<li>Install Gulp and its plugins</li>
<li>Create Gulp tasks for our project</li>
</ul>
<p>This is the first time I using gulp, if you have any info or ideal about gulp feel free to comment and let me know. Very thank you for your comments.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt; is the streaming build system. Gulp’s use of streams and code-over-configuration makes for a simpler and more intuitive build. I didn’t use Gulp or Grunt before. Today, I hear about it and decide to use it on my project. What I write here is not a tutorial, it just what I do with Gulp.&lt;/p&gt;
&lt;h2 id=&quot;1-Install-–-NodeJS-Gulp&quot;&gt;&lt;a href=&quot;#1-Install-–-NodeJS-Gulp&quot; class=&quot;headerlink&quot; title=&quot;1. Install – NodeJS - Gulp:&quot;&gt;&lt;/a&gt;1. Install – NodeJS - Gulp:&lt;/h2&gt;&lt;p&gt;To install Gulp we must have node installed. Nodejs can be installed from here &lt;a href=&quot;http://nodejs.org/&quot;&gt;http://nodejs.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;– Gulp: We should install gulp globally&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; -g gulp&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-Using-Gulp-in-project-First-jump-to-your-project-folder&quot;&gt;&lt;a href=&quot;#2-Using-Gulp-in-project-First-jump-to-your-project-folder&quot; class=&quot;headerlink&quot; title=&quot;2. Using Gulp in project First, jump to your project folder.&quot;&gt;&lt;/a&gt;2. Using Gulp in project First, jump to your project folder.&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Gulp" scheme="http://saysua.com/tags/Gulp/"/>
    
  </entry>
  
  <entry>
    <title>Quản lý các gói thư viện phía client site bằng Bower</title>
    <link href="http://saysua.com/2013/12/07/quan-ly-cac-goi-thu-vien-phia-client-site-bang-bower/"/>
    <id>http://saysua.com/2013/12/07/quan-ly-cac-goi-thu-vien-phia-client-site-bang-bower/</id>
    <published>2013-12-06T23:35:07.000Z</published>
    <updated>2016-10-16T01:42:53.049Z</updated>
    
    <content type="html"><![CDATA[<p>Thời gian trước, có người nói với tôi rằng nên sử dụng Bower để cài đặt những gói thư viện js, css phía client site của một plugin tôi đang phát triển. Tôi cũng chỉ ậm ừ qua, và nghĩ rằng không cần thiết lắm bởi vì hiện tại những thư viện đó vẫn đang chạy tốt.</p>
<p>Vậy tại sao hôm nay tôi lại giới thiệu về bower cho các bạn, đơn giản vì anh bạn đó của tôi đã sử dụng bower cho dự án của mình. Khi anh ta gởi source code cho tôi nó không hề có các thư viện nào như jquery, angulajs, boostrap… và anh ta bảo tôi cài vào đi.</p>
<p>Lúc đó tôi mới mày mò lên các trang web để tải về các thư viện từ jquery, angularjs, boostrap …. rồi copy nó vào thư mục code.</p>
<p>– Không! Không cần phải làm như vậy.</p>
<p>Anh ta nói. “Chỉ cần sử dụng bower install “. Và quả nhiên, bower đã tự động cài hết các gói thư viện cho tôi. Thật tuyệt vời!</p>
<p><img src="/images/bower-logo-300x300.png" alt="bower logo"></p>
<a id="more"></a>
<h1 id="Bower"><a href="#Bower" class="headerlink" title="Bower"></a>Bower</h1><p>Bower là một công cụ quản lý các gói thư viện cho web (A package manager for the web). Nó có thể tìm kiếm, cài đặt hoặc gỡ bõ các gói thư viện (package) web như Javascript, CSS, HTML.</p>
<h2 id="Cai-dat-Bower"><a href="#Cai-dat-Bower" class="headerlink" title="Cài đặt Bower"></a>Cài đặt Bower</h2><p>Trước khi cài đặt bower bạn cần phải cài đặt.</p>
<p>– NodeJs: Có thể tải về và cài đặt tại đây <a href="http://nodejs.org/" target="_blank" rel="external">http://nodejs.org/</a></p>
<p>– NPM: NPM là một gói quản lý của Nodejs. Khi cài đặt NodeJs thì bạn cũng đã có NPM</p>
<p>– GIT: Bower sẽ cài đặt nhiều gói thông qua GIT nên bạn cần phải cài đặt GIT trước khi sử dụng bower.</p>
<p>Sau khi đã cài xong 3 gói trên ta tiến hành cài đặt bower bằng câu lệnh sau:</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> -g bower</div></pre></td></tr></table></figure>
<h2 id="Cai-dat-package"><a href="#Cai-dat-package" class="headerlink" title="Cài đặt package"></a>Cài đặt package</h2><p>Ta có thể sử dụng bower để cài đặt một package, ví dụ cài đặt jquery. Tạo một thư mục và chạy lệnh.</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">bower </span><span class="keyword">install </span><span class="keyword">jquery</span></div></pre></td></tr></table></figure>
<p>Sau khi chạy xong, bower sẽ tạo 1 thư mục bower_components và copy jquery vào.</p>
<p><img src="/images/bower-files.png" alt="bower file"></p>
<p>Bên cạnh đó, ta còn có thể cài đặt 1 phiên bản đặc biệt của package bằng cách thêm dấu thăng (#) và số hiện phiên bản sau tên của package.</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bower <span class="keyword">install</span> jquery<span class="comment">#1.7.0</span></div></pre></td></tr></table></figure>
<p>Ta còn có thể sử dụng bower với git.</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ bower install https:<span class="regexp">//gi</span>thub.com<span class="regexp">/strophe/</span>strophejs.git</div></pre></td></tr></table></figure>
<p>Ta cũng có thể sử dụng bower để cài đặt bởi 1 đường dẫn đến file riêng lẻ.</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>bower install <span class="symbol">http:</span>/<span class="regexp">/backbonejs.org/backbone</span>-min.js</div></pre></td></tr></table></figure>
<h2 id="Tim-kiem-package"><a href="#Tim-kiem-package" class="headerlink" title="Tìm kiếm package"></a>Tìm kiếm package</h2><p>Giả sử bạn muốn sử dụng thư viện bootstrap, nhưng bạn không chắc chắn thư viện nào sẽ sử dụng. Ta có thể sử dụng bower để tìm kiếm xem có những thư viện nào có tên boostrap.</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">bower </span>search <span class="keyword">boostrap</span></div></pre></td></tr></table></figure>
<p>Search results:</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bootstrap git:<span class="regexp">//gi</span>thub.com<span class="regexp">/twbs/</span>bootstrap.git</div><div class="line">angular-bootstrap git:<span class="regexp">//gi</span>thub.com<span class="regexp">/angular-ui/</span>bootstrap-bower.git</div><div class="line">sass-bootstrap git:<span class="regexp">//gi</span>thub.com<span class="regexp">/jlong/</span>sass-bootstrap.git</div><div class="line">bootstrap-sass git:<span class="regexp">//gi</span>thub.com<span class="regexp">/jlong/</span>sass-twitter-bootstrap</div><div class="line">bootstrap-datepicker git:<span class="regexp">//gi</span>thub.com<span class="regexp">/eternicode/</span>bootstrap-datepicker.git</div></pre></td></tr></table></figure>
<h2 id="Xem-cac-package-da-cai-dat"><a href="#Xem-cac-package-da-cai-dat" class="headerlink" title="Xem các package đã cài đặt"></a>Xem các package đã cài đặt</h2><p>Để xem các package đã cài đặt trong thư mục,</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ bower list</div><div class="line">bower<span class="built_in"> check-new </span>    Checking for<span class="built_in"> new </span>versions of the project dependencies..</div><div class="line">test /home/khida/Desktop/test</div><div class="line">├── backbone<span class="comment">#1.1.0 extraneous</span></div><div class="line">├── jquery<span class="comment">#2.0.3 extraneous</span></div><div class="line">└── strophejs<span class="comment">#master extraneous</span></div></pre></td></tr></table></figure>
<h2 id="Nang-cap-va-go-bo-package"><a href="#Nang-cap-va-go-bo-package" class="headerlink" title="Nâng cấp và gỡ bỏ package"></a>Nâng cấp và gỡ bỏ package</h2><p>Nếu như hôm nay bạn thấy rằng package đã có cập nhật mới và muốn nâng cấp nó lên, bạn không cần phải tự tay xóa rồi cài lại package, hãy để bower làm điều đó.</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">bower </span>update</div></pre></td></tr></table></figure>
<p>Còn muốn gỡ bỏ 1 package</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">bower </span>uninstall jquery</div></pre></td></tr></table></figure>
<h2 id="Su-dung-cac-packages-da-cai"><a href="#Su-dung-cac-packages-da-cai" class="headerlink" title="Sử dụng các packages đã cài"></a>Sử dụng các packages đã cài</h2><p>Để sử dụng các packages đã cài, ta chỉ cần chèn nó vào trang HTML như bình thường.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Using Bower<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"click"</span>&gt;</span>Click Me!!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"bower_components/jquery/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        $(<span class="string">"#click"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            alert(<span class="string">'Aha! You using bower!'</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="Quan-ly-de-hon-voi-bower-json"><a href="#Quan-ly-de-hon-voi-bower-json" class="headerlink" title="Quản lý dễ hơn với bower.json"></a>Quản lý dễ hơn với bower.json</h1><p>Giả sử dự án của chúng ta cần sử dụng nhiều packages, việc phải gõ lệnh liên tục để cài từng gói cũng thật không hay. Lúc này ta sẽ định nghĩa các gói thư viện vào trong file bower.json  và sử dụngbower  cài đặt tất cả cùng một lúc.</p>
<p>Ta dùng bower init  để tạo file bower.json</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">$ bower init</div><div class="line">[?] name: Test bower</div><div class="line">[?] <span class="keyword">version</span>: <span class="number">0.0</span>.<span class="number">0</span></div><div class="line">[?] description: This <span class="keyword">is</span> <span class="keyword">a</span> test bower</div><div class="line">[?] main <span class="keyword">file</span>:</div><div class="line">[?] keyword<span class="variable">s:</span></div><div class="line">[?] author<span class="variable">s:</span> Thach Nguyen &lt;thachnuida@gmail.<span class="keyword">com</span>&gt;</div><div class="line">[?] license: MIT</div><div class="line">[?] homepage:</div><div class="line">[?] <span class="keyword">set</span> currently installed components <span class="keyword">as</span> dependencies? Yes</div><div class="line">[?] <span class="built_in">add</span> commonly ignored <span class="keyword">files</span> <span class="keyword">to</span> ignore <span class="keyword">list</span>? Yes</div><div class="line">[?] would you like <span class="keyword">to</span> <span class="keyword">mark</span> this package <span class="keyword">as</span> private which prevents it from being [?] would you like <span class="keyword">to</span> <span class="keyword">mark</span> this package <span class="keyword">as</span> private which prevents it from being accidentally published <span class="keyword">to</span> the registry? No</div><div class="line"></div><div class="line">&#123;</div><div class="line">  name: <span class="string">'Test bower'</span>,</div><div class="line">  <span class="keyword">version</span>: <span class="string">'0.0.0'</span>,</div><div class="line">  description: <span class="string">'This is a test bower'</span>,</div><div class="line">  author<span class="variable">s:</span> [</div><div class="line">    <span class="string">'Thach Nguyen &lt;thachnuida@gmail.com&gt;'</span></div><div class="line">  ],</div><div class="line">  license: <span class="string">'MIT'</span>,</div><div class="line">  ignore: [</div><div class="line">    <span class="string">'**/.*'</span>,</div><div class="line">    <span class="string">'node_modules'</span>,</div><div class="line">    <span class="string">'bower_components'</span>,</div><div class="line">    <span class="string">'test'</span>,</div><div class="line">    <span class="string">'tests'</span></div><div class="line">  ],</div><div class="line">  dependencie<span class="variable">s:</span> &#123;</div><div class="line">    jquery: <span class="string">'~2.0.3'</span>,</div><div class="line">    backbone: <span class="string">'~1.1.0'</span>,</div><div class="line">    strophej<span class="variable">s:</span> <span class="string">'https://github.com/strophe/strophejs.git'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">[?] Looks good? Yes</div></pre></td></tr></table></figure>
<p>Bạn có thể xem file <code>bower.json</code>  và để ý rằng, ở mục <code>dependencies</code> nó đã tự động thêm vào các package mà ta cài trước đó.</p>
<p>Giờ ta muốn cài thêm một package mới và muốn nó update lại file bower.json. Hãy thêm <code>--save</code> khi cài đặt.</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">bower </span><span class="keyword">install </span><span class="keyword">bootstrap </span>--save</div></pre></td></tr></table></figure>
<p>Hãy xem lại file <code>bower.json</code> ta thấy nó đã thêm package bootstrap vào:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"Test bower"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"This is a test bower"</span>,</div><div class="line">  <span class="attr">"authors"</span>: [</div><div class="line">    <span class="string">"Thach Nguyen &lt;thachnuida@gmail.com&gt;"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</div><div class="line">  <span class="attr">"ignore"</span>: [</div><div class="line">    <span class="string">"**/.*"</span>,</div><div class="line">    <span class="string">"node_modules"</span>,</div><div class="line">    <span class="string">"bower_components"</span>,</div><div class="line">    <span class="string">"test"</span>,</div><div class="line">    <span class="string">"tests"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"jquery"</span>: <span class="string">"~2.0.3"</span>,</div><div class="line">    <span class="attr">"backbone"</span>: <span class="string">"~1.1.0"</span>,</div><div class="line">    <span class="attr">"strophejs"</span>: <span class="string">"https://github.com/strophe/strophejs.git"</span>,</div><div class="line">    <span class="attr">"bootstrap"</span>: <span class="string">"~3.0.3"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Bạn thử xóa thư mục <code>bower_components</code> đi và chạy lệnh <code>$ bower install</code></p>
<p>Ha! Các package đã được cài đặt lại đầy đủ như ban đầu. Thật tiện lợi!</p>
<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><h2 id="Thay-doi-thu-muc-cai-dat-package-cua-bower"><a href="#Thay-doi-thu-muc-cai-dat-package-cua-bower" class="headerlink" title="Thay đổi thư mục cài đặt package của bower"></a>Thay đổi thư mục cài đặt package của bower</h2><p>Tạo file <code>.bowerrc</code>  và thêm vào thông tin thư mục</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"directory"</span> : <span class="string">"public/components"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Thời gian trước, có người nói với tôi rằng nên sử dụng Bower để cài đặt những gói thư viện js, css phía client site của một plugin tôi đang phát triển. Tôi cũng chỉ ậm ừ qua, và nghĩ rằng không cần thiết lắm bởi vì hiện tại những thư viện đó vẫn đang chạy tốt.&lt;/p&gt;
&lt;p&gt;Vậy tại sao hôm nay tôi lại giới thiệu về bower cho các bạn, đơn giản vì anh bạn đó của tôi đã sử dụng bower cho dự án của mình. Khi anh ta gởi source code cho tôi nó không hề có các thư viện nào như jquery, angulajs, boostrap… và anh ta bảo tôi cài vào đi.&lt;/p&gt;
&lt;p&gt;Lúc đó tôi mới mày mò lên các trang web để tải về các thư viện từ jquery, angularjs, boostrap …. rồi copy nó vào thư mục code.&lt;/p&gt;
&lt;p&gt;– Không! Không cần phải làm như vậy.&lt;/p&gt;
&lt;p&gt;Anh ta nói. “Chỉ cần sử dụng bower install “. Và quả nhiên, bower đã tự động cài hết các gói thư viện cho tôi. Thật tuyệt vời!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/bower-logo-300x300.png&quot; alt=&quot;bower logo&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Bower" scheme="http://saysua.com/tags/Bower/"/>
    
  </entry>
  
  <entry>
    <title>Viết chức năng upload bằng ajax với jquery và javascript chay</title>
    <link href="http://saysua.com/2013/11/05/viet-chuc-nang-upload-bang-ajax-voi-jquery-va-javascrip-chay/"/>
    <id>http://saysua.com/2013/11/05/viet-chuc-nang-upload-bang-ajax-voi-jquery-va-javascrip-chay/</id>
    <published>2013-11-04T23:43:31.000Z</published>
    <updated>2016-10-16T01:43:27.970Z</updated>
    
    <content type="html"><![CDATA[<p>Trong bài viết này, tôi sẽ chỉ ra hai cách để tạo ajax upload. Cách thứ nhất sử dụng Jquery cùng với plugin <a href="http://jquery.malsup.com/form/#file-upload" target="_blank" rel="external">Form Plugin</a> của nó và cách thứ hai dành cho bạn nào muốn mày mò vọc code để tự mình viết riêng phần upload chỉ dùng javacript. Ở bài viết này, tôi sử dụng PHP để viết phần server.</p>
<a id="more"></a>
<h1 id="File-xu-ly-server"><a href="#File-xu-ly-server" class="headerlink" title="File xử lý server"></a>File xử lý server</h1><p>Để cho đơn giản, nhiệm vụ của file phía server ở đây chỉ bắt file được upload lên, lưu vào thư mục upload  và trả về thông tin của file.</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?php</span></span></span></div><div class="line"><span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; 0) &#123;</div><div class="line">  echo "Error: " . $_FILES[<span class="string">"file"</span>][<span class="symbol">"error"</span>] . "<span class="xml"><span class="php">&lt;br&gt;</span></span>";</div><div class="line">&#125;</div><div class="line">else &#123;</div><div class="line">  echo "Upload: " . $_FILES[<span class="string">"file"</span>][<span class="symbol">"name"</span>] . "<span class="xml"><span class="php">&lt;br&gt;</span></span>";</div><div class="line">  echo "Type: " . $_FILES[<span class="string">"file"</span>][<span class="symbol">"type"</span>] . "<span class="xml"><span class="php">&lt;br&gt;</span></span>";</div><div class="line">  echo "Size: " . ($_FILES[<span class="string">"file"</span>][<span class="symbol">"size"</span>] / 1024) . " kB<span class="xml"><span class="php">&lt;br&gt;</span></span>";</div><div class="line">  echo "Stored in: " . $<span class="emphasis">_FILES["file"]["tmp_</span>name"];</div><div class="line"></div><div class="line">  // Save file</div><div class="line">  move<span class="emphasis">_uploaded_</span>file($<span class="emphasis">_FILES["file"]["tmp_</span>name"], "upload/" . $_FILES[<span class="string">"file"</span>][<span class="symbol">"name"</span>]);</div><div class="line">  echo "Stored in: " . "upload/" . $_FILES[<span class="string">"file"</span>][<span class="symbol">"name"</span>];</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h1 id="Ajax-upload-bang-Form-Plugin"><a href="#Ajax-upload-bang-Form-Plugin" class="headerlink" title="Ajax upload bằng Form Plugin"></a>Ajax upload bằng Form Plugin</h1><p>Để sử dụng Jquery Form Plugin, trước tiên ta cần tải nó về tại đây <a href="http://jquery.malsup.com/form/#download" target="_blank" rel="external">http://jquery.malsup.com/form/#download</a>. Ở trang này các bạn cũng có thể xem thêm những ví dụ của nó, và để ý rằng plugin này không chỉ hữu ích cho việc upload file mà còn có thể xử dụng cho form ajax submit. Tuy nhiên ở đây tôi chỉ trình bày về ajax upload. Sau đó, ta nhúng thư viện Jquery và plugin Form mới tải về vào trang web. Cuối cùng, ta sử dụng phương thức ajaxForm  cho form cần thêm chức năng ajax upload. Mọi thao tác trên được thể hiện như đoạn code dưới đây.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax upload using plugin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.form.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-id">#form-upload</span> &#123; <span class="attribute">padding</span>: <span class="number">10px</span>; <span class="attribute">background</span>: <span class="number">#A5CCFF</span>; <span class="attribute">border-radius</span>: <span class="number">5px</span>;&#125;</div><div class="line">    <span class="selector-id">#progress</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>; <span class="attribute">width</span>: <span class="number">500px</span>; <span class="attribute">height</span>: <span class="number">20px</span>; <span class="attribute">margin-top</span>: <span class="number">10px</span>;<span class="attribute">text-align</span>: center;<span class="attribute">position</span>: relative;&#125;</div><div class="line">    <span class="selector-id">#bar</span> &#123; <span class="attribute">background</span>: <span class="number">#F39A3A</span>; <span class="attribute">height</span>: <span class="number">20px</span>; <span class="attribute">width</span>: <span class="number">0px</span>;&#125;</div><div class="line">    <span class="selector-id">#percent</span> &#123; <span class="attribute">position</span>: absolute; <span class="attribute">left</span>: <span class="number">50%</span>; <span class="attribute">top</span>: <span class="number">0px</span>;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Upload file using Form plugin<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form-upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"file.php"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"select-file"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Upload"</span> <span class="attr">id</span>=<span class="string">"submit-upload"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"progress"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"percent"</span>&gt;</span>0%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  $(<span class="string">'#form-upload'</span>).ajaxForm(&#123;</div><div class="line">    <span class="attr">complete</span>: <span class="function"><span class="keyword">function</span>(<span class="params">xhr</span>) </span>&#123;</div><div class="line">      <span class="comment">// Add response text to div #result</span></div><div class="line">      $(<span class="string">'#result'</span>).html(xhr.responseText);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Hien-thi-them-upload-file"><a href="#Hien-thi-them-upload-file" class="headerlink" title="Hiển thị thêm % upload file"></a>Hiển thị thêm % upload file</h2><p>Trong lúc upload file, để hiển thị thêm % upload file, ta thêm một vài đoạn code ngắn vào phần javascript như sau, đoạn code thêm vào sẽ xử lý tính % upload khi ta đang upload file:</p>
<p><img src="/images/uploadfile.PNG" alt="Giao dien upload"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> bar = $(<span class="string">'#bar'</span>);</div><div class="line">  <span class="keyword">var</span> percent = $(<span class="string">'#percent'</span>);</div><div class="line">  <span class="keyword">var</span> result = $(<span class="string">'#result'</span>);</div><div class="line">  <span class="keyword">var</span> percentValue = <span class="string">"0%"</span>;</div><div class="line"></div><div class="line">  $(<span class="string">'#form-upload'</span>).ajaxForm(&#123;</div><div class="line">      <span class="comment">// Do something before uploading</span></div><div class="line">      beforeUpload: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        result.empty();</div><div class="line">        percentValue = <span class="string">"0%"</span>;</div><div class="line">        bar.width = percentValue;</div><div class="line">        percent.html(percentValue);</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      <span class="comment">// Do somthing while uploading</span></div><div class="line">      uploadProgress: <span class="function"><span class="keyword">function</span>(<span class="params">event, position, total, percentComplete</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> percentValue = percentComplete + <span class="string">'%'</span>;</div><div class="line">        bar.width(percentValue)</div><div class="line">        percent.html(percentValue);</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      <span class="comment">// Do something while uploading file finish</span></div><div class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> percentValue = <span class="string">'100%'</span>;</div><div class="line">        bar.width(percentValue)</div><div class="line">        percent.html(percentValue);</div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      <span class="comment">// Add response text to div #result when uploading complete</span></div><div class="line">      complete: <span class="function"><span class="keyword">function</span>(<span class="params">xhr</span>) </span>&#123;</div><div class="line">        $(<span class="string">'#result'</span>).html(xhr.responseText);</div><div class="line">      &#125;</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="Tu-viet-phan-ajax-upload"><a href="#Tu-viet-phan-ajax-upload" class="headerlink" title="Tự viết phần ajax upload"></a>Tự viết phần ajax upload</h1><p>Ở phần này dành cho bạn nào muốn biết nếu không sử dụng plugin thì ta có thể tự viết được chức năng upload bằng ajax hay không? Tất nhiên là được. Ta sẽ sử dụng đến FormData  và XMLHttpRequest  để xử lý. Đoạn code dưới đây sẽ chỉ rõ hơn cho bạn thấy, với phần mã HTML giống như phần trên.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> bar = <span class="built_in">document</span>.getElementById(<span class="string">'bar'</span>)</div><div class="line">  <span class="keyword">var</span> percent = <span class="built_in">document</span>.getElementById(<span class="string">'percent'</span>)</div><div class="line">  <span class="keyword">var</span> result = <span class="built_in">document</span>.getElementById(<span class="string">'result'</span>)</div><div class="line">  <span class="keyword">var</span> percentValue = <span class="string">"0%"</span>;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> fileInput = <span class="built_in">document</span>.getElementById(<span class="string">'select-file'</span>);</div><div class="line">  <span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">'form-upload'</span>);</div><div class="line"></div><div class="line">  form.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</div><div class="line">    <span class="comment">// Chan khong cho form tao submit</span></div><div class="line">    evt.preventDefault();</div><div class="line"></div><div class="line">    <span class="comment">// Ajax upload</span></div><div class="line">    <span class="keyword">var</span> file = fileInput.files[<span class="number">0</span>];</div><div class="line"></div><div class="line">    <span class="comment">// fd dung de luu gia tri goi len</span></div><div class="line">    <span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();</div><div class="line">    fd.append(<span class="string">'file'</span>, file);</div><div class="line"></div><div class="line">    <span class="comment">// xhr dung de goi data bang ajax</span></div><div class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    xhr.open(<span class="string">'POST'</span>, <span class="string">'file.php'</span>, <span class="literal">true</span>);</div><div class="line"></div><div class="line">    xhr.upload.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (e.lengthComputable) &#123;</div><div class="line">        <span class="keyword">var</span> percentValue = (e.loaded / e.total) * <span class="number">100</span> + <span class="string">'%'</span>;</div><div class="line">        percent.innerHTML  = percentValue;</div><div class="line">        bar.setAttribute(<span class="string">'style'</span>, <span class="string">'width: '</span> + percentValue);</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status == <span class="number">200</span>) &#123;</div><div class="line">        result.innerHTML = <span class="keyword">this</span>.response;</div><div class="line">      &#125;;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    xhr.send(fd);</div><div class="line"></div><div class="line">  &#125;, <span class="literal">false</span>);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Rõ ràng là việc không sử dụng plugin thì ta phải tự tay xử lý nhiều hơn, tuy nhiên với việc biết được bản chất của nó thì cũng thú vị. Nếu bạn thấy bài viết này bổ ích thì hãy chia sẻ cho bạn bè cùng đọc nhé.</p>
<h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p>Toàn bộ souce code đầy đủ của bài viết, các bạn có thể xem lấy về tại đây <a href="https://github.com/thachnuida/ajax-upload-demo" target="_blank" rel="external">https://github.com/thachnuida/ajax-upload-demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Trong bài viết này, tôi sẽ chỉ ra hai cách để tạo ajax upload. Cách thứ nhất sử dụng Jquery cùng với plugin &lt;a href=&quot;http://jquery.malsup.com/form/#file-upload&quot;&gt;Form Plugin&lt;/a&gt; của nó và cách thứ hai dành cho bạn nào muốn mày mò vọc code để tự mình viết riêng phần upload chỉ dùng javacript. Ở bài viết này, tôi sử dụng PHP để viết phần server.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ajax" scheme="http://saysua.com/tags/Ajax/"/>
    
      <category term="Jquery" scheme="http://saysua.com/tags/Jquery/"/>
    
  </entry>
  
  <entry>
    <title>Bắt sự kiện kích chuột bên ngoài một phần tử và kiểm tra phần tử ẩn/hiện bằng JQuery</title>
    <link href="http://saysua.com/2013/10/24/bat-su-kien-kich-chuot-ben-ngoai-mot-phan-tu-va-kiem-tra-phan-tu-anhien-bang-jquery/"/>
    <id>http://saysua.com/2013/10/24/bat-su-kien-kich-chuot-ben-ngoai-mot-phan-tu-va-kiem-tra-phan-tu-anhien-bang-jquery/</id>
    <published>2013-10-23T23:49:01.000Z</published>
    <updated>2016-10-16T01:36:11.728Z</updated>
    
    <content type="html"><![CDATA[<p>Ngày hôm nay, trong khi đang làm, tôi bắt gặp 2 trường hợp cần giải quyết với jquery. Trường hợp thứ nhất là bắt sự kiện khi người dùng kích chuột bên ngoài một phần tử và trường hợp thứ hai là kiểm tra một phần tử có đang hiển thị hay không.</p>
<p>Cách giải quyết hai trường hợp này cũng khá đơn giản, nhưng tôi nghĩ nõ cũng sẽ làm ta mất một số thời gian nếu như chưa biết. Vì vậy tôi sẽ chia sẽ hai thủ thuật này ở đây.</p>
<a id="more"></a>
<h1 id="Bat-su-kien-kich-chuot-ben-ngoai-mot-phan-tu"><a href="#Bat-su-kien-kich-chuot-ben-ngoai-mot-phan-tu" class="headerlink" title="Bắt sự kiện kích chuột bên ngoài một phần tử"></a>Bắt sự kiện kích chuột bên ngoài một phần tử</h1><p>Giả sử tôi có một phần tử có id là click-me  và tôi cần bắt sự kiện kích chuột lên nó hoặc kích chuột bên ngoài nó để có những xử lý khác nhau. Đoạn code ngắn dưới đây sẽ giải quyết vấn đề đó:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"Click outside :D "</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">'#click-me'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    alert(<span class="string">"Click me"</span>);</div><div class="line">    event.stopPropagation();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://jsfiddle.net/thachnuida/gFGUt/" target="_blank" rel="external">Xem ví dụ.</a></p>
</blockquote>
<p>Ngoài ra ta còn có thể sử dụng <code>return false;</code>  thay cho <code>event.stopPropagation()</code>.  Các bạn có thể đoán xem, nếu ta bỏ dòng <code>event.stopPropagation()</code> thì chuyện gì sẽ xảy ra?</p>
<h1 id="Kiem-tra-mot-phan-tu-dang-hien-thi-hay-dang-an"><a href="#Kiem-tra-mot-phan-tu-dang-hien-thi-hay-dang-an" class="headerlink" title="Kiểm tra một phần tử đang hiển thị hay đang ẩn"></a>Kiểm tra một phần tử đang hiển thị hay đang ẩn</h1><p>Muốn kiểm tra một phần tử đang ẩn hay đang hiện, chúng ta có thể dùng đoạn code sau:</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#click-me'</span>).<span class="keyword">is</span>(<span class="string">':visible'</span>) <span class="regexp">//</span> =&gt; <span class="literal">true</span> <span class="keyword">or</span> <span class="literal">false</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ngày hôm nay, trong khi đang làm, tôi bắt gặp 2 trường hợp cần giải quyết với jquery. Trường hợp thứ nhất là bắt sự kiện khi người dùng kích chuột bên ngoài một phần tử và trường hợp thứ hai là kiểm tra một phần tử có đang hiển thị hay không.&lt;/p&gt;
&lt;p&gt;Cách giải quyết hai trường hợp này cũng khá đơn giản, nhưng tôi nghĩ nõ cũng sẽ làm ta mất một số thời gian nếu như chưa biết. Vì vậy tôi sẽ chia sẽ hai thủ thuật này ở đây.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jquery" scheme="http://saysua.com/tags/Jquery/"/>
    
  </entry>
  
  <entry>
    <title>Kiểm tra một phần tử tồn tại bằng JQuery</title>
    <link href="http://saysua.com/2013/10/15/kiem-tra-mot-phan-tu-ton-tai-bang-jquery/"/>
    <id>http://saysua.com/2013/10/15/kiem-tra-mot-phan-tu-ton-tai-bang-jquery/</id>
    <published>2013-10-14T23:52:43.000Z</published>
    <updated>2016-10-16T01:41:48.065Z</updated>
    
    <content type="html"><![CDATA[<p>Trong khi sử dụng JQuery, có nhiều trường hợp tôi tự hỏi làm sao để kiểm tra một phần tử có tồn tại hay không. Chẳng hạn như div có id là “exist” đã có hay chưa.</p>
<p>Ngay khi nảy ra câu hỏi tôi nghĩ ngay đến một cách kiểm tra đơn giản:</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="symbol">$</span>(<span class="string">'#exist'</span>)) &#123;</div><div class="line">  console.<span class="built-in">log</span>(<span class="string">'exist'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Nhưng thực tế thì cách trên hoàn toàn sai bởi vì khi sử dụng <code>$()</code>  nó luôn trả về một đối tượng cho dù không tồn tại phần tử ta muốn xác định thì nó cũng sẽ trả về một đối tượng rỗng.  Vì vậy điều kiện trong câu lệnh if  sẽ luôn luôn đúng.</p>
<a id="more"></a>
<p>Do đó, để kiểm tra một phần tử có tồn tại hay không bằng JQuery ta có thể thực hiện như sau:</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="symbol">$</span>(<span class="string">'#exist'</span>).length) &#123;</div><div class="line">  console.<span class="built-in">log</span>(<span class="string">'exist'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Hoặc là:</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="symbol">$</span>(<span class="string">'#exist'</span>)[<span class="number">0</span>]) &#123;</div><div class="line">  console.<span class="built-in">log</span>(<span class="string">'exist'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Nếu phần tử ta cần xác định không xuất hiện, JQuery sẽ trả về đối tượng rỗng do đó <code>length</code> sẽ cho giá trị 0 và [0]  sẽ cho giá trị <code>undefined</code> .</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Trong khi sử dụng JQuery, có nhiều trường hợp tôi tự hỏi làm sao để kiểm tra một phần tử có tồn tại hay không. Chẳng hạn như div có id là “exist” đã có hay chưa.&lt;/p&gt;
&lt;p&gt;Ngay khi nảy ra câu hỏi tôi nghĩ ngay đến một cách kiểm tra đơn giản:&lt;/p&gt;
&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;symbol&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;#exist&#39;&lt;/span&gt;)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  console.&lt;span class=&quot;built-in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;exist&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Nhưng thực tế thì cách trên hoàn toàn sai bởi vì khi sử dụng &lt;code&gt;$()&lt;/code&gt;  nó luôn trả về một đối tượng cho dù không tồn tại phần tử ta muốn xác định thì nó cũng sẽ trả về một đối tượng rỗng.  Vì vậy điều kiện trong câu lệnh if  sẽ luôn luôn đúng.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jquery" scheme="http://saysua.com/tags/Jquery/"/>
    
  </entry>
  
  <entry>
    <title>Xóa 1 phần tử trong mảng bằng Javascript</title>
    <link href="http://saysua.com/2013/10/12/xoa-1-phan-tu-trong-mang-bang-javascript/"/>
    <id>http://saysua.com/2013/10/12/xoa-1-phan-tu-trong-mang-bang-javascript/</id>
    <published>2013-10-11T23:56:13.000Z</published>
    <updated>2016-10-16T01:43:34.400Z</updated>
    
    <content type="html"><![CDATA[<p>Khi lập trình với javascript và một vài ngôn ngữ khác, có một thao tác tưởng chừng rất đơn giản nhưng lại luôn khiến tôi bối rối về cách thực hiện nó. Đó chính là Xóa một phần tử trong mảng.</p>
<h1 id="Javascript-Splice"><a href="#Javascript-Splice" class="headerlink" title="Javascript: Splice"></a>Javascript: Splice</h1><p>Trong javascript, để xóa một phần tử trong mảng ta có thể dùng hàm <code>splice()</code></p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'say'</span>, <span class="string">'sua'</span>, <span class="string">'com'</span>];</div><div class="line">a.splice(<span class="number">0</span>,<span class="number">1</span>); <span class="comment">// Xóa 1 phần tử tại vị trí 0</span></div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// =&gt; a = ['sua', 'com']</span></div></pre></td></tr></table></figure>
<p>Chúng ta có thể kết hợp <code>splice()</code>  cùng với <code>indexOf()</code>  để xóa phần tử dựa vào giá trị của nó:</p>
<figure class="highlight cal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'say'</span>, <span class="string">'sua'</span>, <span class="string">'com'</span>];</div><div class="line"><span class="keyword">var</span> deleteElement = <span class="string">'sua'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> i = a.indexOf(deleteElement);</div><div class="line"><span class="keyword">if</span> (i != -<span class="number">1</span>) &#123;</div><div class="line">    a.splice(i,<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(a); // =&gt; [<span class="string">'say'</span>, <span class="string">'com'</span>]</div></pre></td></tr></table></figure>
<p>Nếu các bạn muốn thực hiện thêm nhiều thao tác với mảng các bạn có thể tham khảo thư viện <code>underscore</code> như ở bài viết <a href="http://saysua.com/2013/08/12/js-xu-ly-mang-voi-underscore-js/">Xử lý mảng với underscore</a></p>
<p>Tóm lại: để xóa một phần tử trong mảng ta có thể dùng <code>array.splice(vị trí cần xóa, 1)</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Khi lập trình với javascript và một vài ngôn ngữ khác, có một thao tác tưởng chừng rất đơn giản nhưng lại luôn khiến tôi bối rối về cách thực hiện nó. Đó chính là Xóa một phần tử trong mảng.&lt;/p&gt;
&lt;h1 id=&quot;Javascript-Splice&quot;&gt;&lt;a href=&quot;#Javascript-Splice&quot; class=&quot;headerlink&quot; title=&quot;Javascript: Splice&quot;&gt;&lt;/a&gt;Javascript: Splice&lt;/h1&gt;&lt;p&gt;Trong javascript, để xóa một phần tử trong mảng ta có thể dùng hàm &lt;code&gt;splice()&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://saysua.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Đổi đối tượng JQuery sang DOM</title>
    <link href="http://saysua.com/2013/10/09/doi-doi-tuong-jquery-sang-dom/"/>
    <id>http://saysua.com/2013/10/09/doi-doi-tuong-jquery-sang-dom/</id>
    <published>2013-10-09T07:48:10.000Z</published>
    <updated>2016-10-16T01:41:10.266Z</updated>
    
    <content type="html"><![CDATA[<p>Trong đối tượng JQuery nó đã có chứa thành phần DOM. Để lấy được thành phần DOM từ đối tượng JQuery ta có thể sử dụng phương thức get() .</p>
<a id="more"></a>
<p>Ví dụ ta có một danh sách như sau :</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>say<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>sua<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Nếu như đối tượng JQuery chỉ có một thành phần DOM ta có thể dùng 2 cách lấy:</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$<span class="comment">(‘ul’)</span>.get<span class="comment">(0)</span>  hoặc $<span class="comment">(‘ul’)</span>[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<p>Nếu đối tượng JQuery có nhiều thành phần DOM, để lấy hết tất cả ta sử dụng:</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$<span class="comment">(‘li’)</span>.get<span class="comment">()</span></div></pre></td></tr></table></figure>
<p>Ví dụ:</p>
<iframe src="http://jsfiddle.net/thachnuida/HRfVT/embedded" width="100%" height="300" frameborder="0" allowfullscreen></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Trong đối tượng JQuery nó đã có chứa thành phần DOM. Để lấy được thành phần DOM từ đối tượng JQuery ta có thể sử dụng phương thức get() .&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jquery" scheme="http://saysua.com/tags/Jquery/"/>
    
  </entry>
  
  <entry>
    <title>Trích xuất dữ liệu web bằng PHP với PQLite</title>
    <link href="http://saysua.com/2013/09/14/trich-xuat-du-lieu-web-bang-php-voi-pqlite/"/>
    <id>http://saysua.com/2013/09/14/trich-xuat-du-lieu-web-bang-php-voi-pqlite/</id>
    <published>2013-09-14T07:58:32.000Z</published>
    <updated>2016-10-16T01:44:44.102Z</updated>
    
    <content type="html"><![CDATA[<p>Đã bao giờ bạn muốn trích xuất thông tin từ một trang web bằng PHP, chẳng hạn như giá cổ phiếu, giá vàng, nội dung bài báo… công việc đầu tiên là bạn sẽ đọc nội dung của trang web đó rồi tìm đến phần tử chứa nội dung cần lấy. Hẳn các bạn đã từng thử nhiều cách bằng hàm tìm chuỗi hoặc dùng biểu thức chính quy và bạn thấy nó thật phức tạp, hoặc nếu trên trang web đó có thay đổi lại cấu trúc thì chúng ta cũng phải rất vất vã để sửa lại hàm lấy thông tin của mình.</p>
<p>Và rồi bạn tự hỏi rằng, ước gì mình có thể thao tác với nội dung trang web đó đơn giản như bạn đã làm với JQuery, bạn có thể lấy các thẻ bằng ID hoặc là class của nó.</p>
<p>Và đây, tôi xin giới thiệu đến cho các bạn một thư viện PHP có thể giúp bạn làm việc với các phần tử HTML đơn giản như các bạn đang làm với Jquery. Các bạn có thể đi qua từng phần tử, lấy nội dung của nó, thậm chí có thể thay đổi nội dung bên trong của 1 phần tử, thay đổi class,…</p>
<p>PQlite sẽ giúp chúng ta làm phần khó.</p>
<a id="more"></a>
<p>Thay vì trình bày chi tiết về nó, tôi sẽ cùng với các bạn làm một chức năng nho nhỏ như sau:</p>
<p>Đây là trang web chúng ta sẽ cùng nhau lấy dữ liệu:</p>
<p><a href="http://hcm.24h.com.vn/ttcb/giavang/giavang.php" target="_blank" rel="external">http://hcm.24h.com.vn/ttcb/giavang/giavang.php</a></p>
<p>Nội dung tôi muốn lấy ở đây là bảng giá vàng. Các bạn dùng Chrome mở trang web lên, rồi kích chuột phải vào bảng giá vàng, chọn “Inspect Element” để coi nội dung.</p>
<p><img src="/images/giavang.png" alt="Bang Gia Vang"></p>
<p>Ta có thể thấy bảng giá vàng ở đây là một table  với class là tb-giaVang . Thường thì để lấy chính xác nội dung của một phần tử ta nên dựa vào ID của nó bởi vì ID được đặt là định danh duy nhất, nhưng ở đây bảng giá vàng lại không có ID, tuy nhiên khi kiểm tra class tb-giaVang  cũng là duy nhất nên chúng ta có thể dựa vào nó để lấy giá trị của bảng giá vàng được.</p>
<p>Đầu tiên các bạn tải thư viện PQlite về, sau đó tạo 1 file test.php  với nội dung như sau. Chạy nó và xem kết quả.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">include_once</span>( <span class="string">'PQLite.php'</span> );</div><div class="line"></div><div class="line">$content = file_get_contents(<span class="string">'http://hcm.24h.com.vn/ttcb/giavang/giavang.php'</span>);</div><div class="line"></div><div class="line">$pq = <span class="keyword">new</span> PQLite($content);</div><div class="line"></div><div class="line">$giavang = $pq-&gt;find(<span class="string">'.tb-giaVang'</span>)-&gt;getOuterHtml();</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $giavang;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Đã bao giờ bạn muốn trích xuất thông tin từ một trang web bằng PHP, chẳng hạn như giá cổ phiếu, giá vàng, nội dung bài báo… công việc đầu tiên là bạn sẽ đọc nội dung của trang web đó rồi tìm đến phần tử chứa nội dung cần lấy. Hẳn các bạn đã từng thử nhiều cách bằng hàm tìm chuỗi hoặc dùng biểu thức chính quy và bạn thấy nó thật phức tạp, hoặc nếu trên trang web đó có thay đổi lại cấu trúc thì chúng ta cũng phải rất vất vã để sửa lại hàm lấy thông tin của mình.&lt;/p&gt;
&lt;p&gt;Và rồi bạn tự hỏi rằng, ước gì mình có thể thao tác với nội dung trang web đó đơn giản như bạn đã làm với JQuery, bạn có thể lấy các thẻ bằng ID hoặc là class của nó.&lt;/p&gt;
&lt;p&gt;Và đây, tôi xin giới thiệu đến cho các bạn một thư viện PHP có thể giúp bạn làm việc với các phần tử HTML đơn giản như các bạn đang làm với Jquery. Các bạn có thể đi qua từng phần tử, lấy nội dung của nó, thậm chí có thể thay đổi nội dung bên trong của 1 phần tử, thay đổi class,…&lt;/p&gt;
&lt;p&gt;PQlite sẽ giúp chúng ta làm phần khó.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Scrape" scheme="http://saysua.com/tags/Scrape/"/>
    
      <category term="PHP" scheme="http://saysua.com/tags/PHP/"/>
    
  </entry>
  
</feed>
